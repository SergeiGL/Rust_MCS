use criterion::{criterion_group, criterion_main, Criterion};
use nalgebra::SVector;
use Rust_MCS::*;


criterion_group! {
    name = benches;
    config = Criterion::default();
    targets = bench_0
}
criterion_main!(benches);


fn bench_0(c: &mut Criterion) {
    use nalgebra::{SMatrix, SVector};

    const SMAX: usize = 2_000;
    let stop = StopStruct {
        nsweeps: 200,                // maximum number of sweeps
        freach: f64::NEG_INFINITY,   // target function value
        nf: 2_000_000,               // maximum number of function evaluations
    };
    let iinit = IinitEnum::Zero;
    let local = 200;
    let gamma = 2e-7;
    let u = SVector::<f64, 6>::from_row_slice(&[-6.506834377244, -0.5547628574185793, -0.4896101151981129, -4.167584856725679, -6.389642504060847, -5.528716818248636]);
    let v = SVector::<f64, 6>::from_row_slice(&[0.6136260223676221, 3.3116327823744762, 1.815553122672147, 0.06874148889830267, 0.7052383406994288, 0.93288192217477]);
    let hess = SMatrix::<f64, 6, 6>::from_row_slice(&[
        0.8277209419820275, 0.35275501307855395, 0.252012633495165, 0.5667951361102919, 0.19630620226079598, 0.0648101272618129,
        0.5081006457816327, 0.2660878681097819, 0.09782770288876363, 0.43830363933100314, 0.4746456902322366, 0.4661411009402323,
        0.19980055789123086, 0.4986248326438728, 0.012620127489665345, 0.19089710870186494, 0.4362731501809838, 0.6063090941013247,
        0.7310040262066118, 0.4204623417897273, 0.8664287267092771, 0.9742278318360923, 0.6386093993614557, 0.27981042978028847,
        0.6800547697745852, 0.5742073425616279, 0.8821852581714857, 0.13408110711794174, 0.04935188705985705, 0.9987572981515097,
        0.6187202250393025, 0.1377423026724791, 0.8070825819627165, 0.2817037864244687, 0.5842187774516107, 0.09751501025007547
    ]);

    c.bench_function("bench_0", |b| b.iter(|| mcs::<SMAX, 6>(hm6, &u, &v, &stop, &iinit, local, gamma, &hess)));
}


const HM6_A: [[f64; 6]; 4] = [
    [10.00, 3.00, 17.00, 3.50, 1.70, 8.00],
    [0.05, 10.00, 17.00, 0.10, 8.00, 14.00],
    [3.00, 3.50, 1.70, 10.00, 17.00, 8.00],
    [17.00, 8.00, 0.05, 10.00, 0.10, 14.00],
];

const HM6_P: [[f64; 6]; 4] = [
    [0.1312, 0.1696, 0.5569, 0.0124, 0.8283, 0.5886],
    [0.2329, 0.4135, 0.8307, 0.3736, 0.1004, 0.9991],
    [0.2348, 0.1451, 0.3522, 0.2883, 0.3047, 0.6650],
    [0.4047, 0.8828, 0.8732, 0.5743, 0.1091, 0.0381],
];

const C: [f64; 4] = [1.0, 1.2, 3.0, 3.2];


pub fn hm6<const N: usize>(x: &SVector<f64, N>) -> f64 {
    debug_assert!(x.len() == 6);
    let mut sum = 0.0;

    for i in 0..4 {
        let a = HM6_A[i];
        let p = HM6_P[i];
        let mut d_i = 0.0;

        for i in 0..6 {
            d_i += a[i] * (x[i] - p[i]).powi(2);
        }

        sum += C[i] * (-d_i).exp();
    }

    -sum
}

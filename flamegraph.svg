<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="22869"><g><title>`0x7FFEAD80FE50 (3 samples, 0.01%)</title><rect x="0.0131%" y="757" width="0.0131%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="3"/><text x="0.2631%" y="767.50"></text></g><g><title>`0x7FFEAD891A44 (3 samples, 0.01%)</title><rect x="0.0131%" y="741" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.2631%" y="751.50"></text></g><g><title>`0x7FFEAAA30046 (4 samples, 0.02%)</title><rect x="0.0131%" y="869" width="0.0175%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="4"/><text x="0.2631%" y="879.50"></text></g><g><title>`0x7FFEAAA1553D (4 samples, 0.02%)</title><rect x="0.0131%" y="853" width="0.0175%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.2631%" y="863.50"></text></g><g><title>`0x7FFEAA9A423B (4 samples, 0.02%)</title><rect x="0.0131%" y="837" width="0.0175%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="4"/><text x="0.2631%" y="847.50"></text></g><g><title>`0x7FFEAAA06225 (4 samples, 0.02%)</title><rect x="0.0131%" y="821" width="0.0175%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="4"/><text x="0.2631%" y="831.50"></text></g><g><title>`0x7FFEAB162586 (4 samples, 0.02%)</title><rect x="0.0131%" y="805" width="0.0175%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="4"/><text x="0.2631%" y="815.50"></text></g><g><title>`0x7FFEAD854560 (4 samples, 0.02%)</title><rect x="0.0131%" y="789" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="4"/><text x="0.2631%" y="799.50"></text></g><g><title>`0x7FFEAD80FAD0 (4 samples, 0.02%)</title><rect x="0.0131%" y="773" width="0.0175%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="4"/><text x="0.2631%" y="783.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_horizontally(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (8 samples, 0.03%)</title><rect x="0.4854%" y="325" width="0.0350%" height="15" fill="rgb(220,122,19)" fg:x="111" fg:w="8"/><text x="0.7354%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_generic(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;, nalgebra::base::dimension::Const (8 samples, 0.03%)</title><rect x="0.4854%" y="309" width="0.0350%" height="15" fill="rgb(250,228,42)" fg:x="111" fg:w="8"/><text x="0.7354%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::default_allocator::impl$9::reallocate_copy(nalgebra::base::dimension::Const&lt;3&gt;, nalgebra::base::dimension::Dyn, nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (8 samples, 0.03%)</title><rect x="0.4854%" y="293" width="0.0350%" height="15" fill="rgb(240,193,28)" fg:x="111" fg:w="8"/><text x="0.7354%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt;::resize(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (5 samples, 0.02%)</title><rect x="0.4985%" y="277" width="0.0219%" height="15" fill="rgb(216,20,37)" fg:x="114" fg:w="5"/><text x="0.7485%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::reserve_exact (5 samples, 0.02%)</title><rect x="0.4985%" y="261" width="0.0219%" height="15" fill="rgb(206,188,39)" fg:x="114" fg:w="5"/><text x="0.7485%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_exact (5 samples, 0.02%)</title><rect x="0.4985%" y="245" width="0.0219%" height="15" fill="rgb(217,207,13)" fg:x="114" fg:w="5"/><text x="0.7485%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve_exact (5 samples, 0.02%)</title><rect x="0.4985%" y="229" width="0.0219%" height="15" fill="rgb(231,73,38)" fg:x="114" fg:w="5"/><text x="0.7485%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_reserve_exact (5 samples, 0.02%)</title><rect x="0.4985%" y="213" width="0.0219%" height="15" fill="rgb(225,20,46)" fg:x="114" fg:w="5"/><text x="0.7485%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_exact (5 samples, 0.02%)</title><rect x="0.4985%" y="197" width="0.0219%" height="15" fill="rgb(210,31,41)" fg:x="114" fg:w="5"/><text x="0.7485%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (5 samples, 0.02%)</title><rect x="0.4985%" y="181" width="0.0219%" height="15" fill="rgb(221,200,47)" fg:x="114" fg:w="5"/><text x="0.7485%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (5 samples, 0.02%)</title><rect x="0.4985%" y="165" width="0.0219%" height="15" fill="rgb(226,26,5)" fg:x="114" fg:w="5"/><text x="0.7485%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4 samples, 0.02%)</title><rect x="0.5029%" y="149" width="0.0175%" height="15" fill="rgb(249,33,26)" fg:x="115" fg:w="4"/><text x="0.7529%" y="159.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4 samples, 0.02%)</title><rect x="0.5029%" y="133" width="0.0175%" height="15" fill="rgb(235,183,28)" fg:x="115" fg:w="4"/><text x="0.7529%" y="143.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4 samples, 0.02%)</title><rect x="0.5029%" y="117" width="0.0175%" height="15" fill="rgb(221,5,38)" fg:x="115" fg:w="4"/><text x="0.7529%" y="127.50"></text></g><g><title>`0x7FFEAD84776D (4 samples, 0.02%)</title><rect x="0.5029%" y="101" width="0.0175%" height="15" fill="rgb(247,18,42)" fg:x="115" fg:w="4"/><text x="0.7529%" y="111.50"></text></g><g><title>`0x7FFEAD847A15 (4 samples, 0.02%)</title><rect x="0.5029%" y="85" width="0.0175%" height="15" fill="rgb(241,131,45)" fg:x="115" fg:w="4"/><text x="0.7529%" y="95.50"></text></g><g><title>`0x7FFEAD8445EA (3 samples, 0.01%)</title><rect x="0.5378%" y="133" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="123" fg:w="3"/><text x="0.7878%" y="143.50"></text></g><g><title>`0x7FFEAD8168C4 (8 samples, 0.03%)</title><rect x="0.5247%" y="165" width="0.0350%" height="15" fill="rgb(225,111,53)" fg:x="120" fg:w="8"/><text x="0.7747%" y="175.50"></text></g><g><title>`0x7FFEAD816CF1 (7 samples, 0.03%)</title><rect x="0.5291%" y="149" width="0.0306%" height="15" fill="rgb(238,160,17)" fg:x="121" fg:w="7"/><text x="0.7791%" y="159.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::splinit::splinit&lt;6,1000&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), unsigned long long, unsigned long long, unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double*, unsigned long long[1000]*, unsigned long long*, unsigned long long*, unsigned long long*, unsigned long long*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (22 samples, 0.10%)</title><rect x="0.4679%" y="357" width="0.0962%" height="15" fill="rgb(214,148,48)" fg:x="107" fg:w="22"/><text x="0.7179%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_horizontally_mut (21 samples, 0.09%)</title><rect x="0.4723%" y="341" width="0.0918%" height="15" fill="rgb(232,36,49)" fg:x="108" fg:w="21"/><text x="0.7223%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$42::clone(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (10 samples, 0.04%)</title><rect x="0.5204%" y="325" width="0.0437%" height="15" fill="rgb(209,103,24)" fg:x="119" fg:w="10"/><text x="0.7704%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::vec_storage::impl$23::clone(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (10 samples, 0.04%)</title><rect x="0.5204%" y="309" width="0.0437%" height="15" fill="rgb(229,88,8)" fg:x="119" fg:w="10"/><text x="0.7704%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (10 samples, 0.04%)</title><rect x="0.5204%" y="293" width="0.0437%" height="15" fill="rgb(213,181,19)" fg:x="119" fg:w="10"/><text x="0.7704%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (10 samples, 0.04%)</title><rect x="0.5204%" y="277" width="0.0437%" height="15" fill="rgb(254,191,54)" fg:x="119" fg:w="10"/><text x="0.7704%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (10 samples, 0.04%)</title><rect x="0.5204%" y="261" width="0.0437%" height="15" fill="rgb(241,83,37)" fg:x="119" fg:w="10"/><text x="0.7704%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (10 samples, 0.04%)</title><rect x="0.5204%" y="245" width="0.0437%" height="15" fill="rgb(233,36,39)" fg:x="119" fg:w="10"/><text x="0.7704%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (10 samples, 0.04%)</title><rect x="0.5204%" y="229" width="0.0437%" height="15" fill="rgb(226,3,54)" fg:x="119" fg:w="10"/><text x="0.7704%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (10 samples, 0.04%)</title><rect x="0.5204%" y="213" width="0.0437%" height="15" fill="rgb(245,192,40)" fg:x="119" fg:w="10"/><text x="0.7704%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (10 samples, 0.04%)</title><rect x="0.5204%" y="197" width="0.0437%" height="15" fill="rgb(238,167,29)" fg:x="119" fg:w="10"/><text x="0.7704%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (10 samples, 0.04%)</title><rect x="0.5204%" y="181" width="0.0437%" height="15" fill="rgb(232,182,51)" fg:x="119" fg:w="10"/><text x="0.7704%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::add_basket::add_basket&lt;6&gt;(unsigned long long*, alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (3 samples, 0.01%)</title><rect x="0.6603%" y="341" width="0.0131%" height="15" fill="rgb(231,60,39)" fg:x="151" fg:w="3"/><text x="0.9103%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtrec::updtrec(unsigned long long, unsigned long long, ref$&lt;slice2$ (54 samples, 0.24%)</title><rect x="0.7521%" y="325" width="0.2361%" height="15" fill="rgb(208,69,12)" fg:x="172" fg:w="54"/><text x="1.0021%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::reserve (3 samples, 0.01%)</title><rect x="0.9882%" y="293" width="0.0131%" height="15" fill="rgb(235,93,37)" fg:x="226" fg:w="3"/><text x="1.2382%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;bool,alloc::alloc::Global&gt;::reserve (3 samples, 0.01%)</title><rect x="0.9882%" y="277" width="0.0131%" height="15" fill="rgb(213,116,39)" fg:x="226" fg:w="3"/><text x="1.2382%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (3 samples, 0.01%)</title><rect x="0.9882%" y="261" width="0.0131%" height="15" fill="rgb(222,207,29)" fg:x="226" fg:w="3"/><text x="1.2382%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (3 samples, 0.01%)</title><rect x="0.9882%" y="245" width="0.0131%" height="15" fill="rgb(206,96,30)" fg:x="226" fg:w="3"/><text x="1.2382%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="0.9882%" y="229" width="0.0131%" height="15" fill="rgb(218,138,4)" fg:x="226" fg:w="3"/><text x="1.2382%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3 samples, 0.01%)</title><rect x="0.9882%" y="213" width="0.0131%" height="15" fill="rgb(250,191,14)" fg:x="226" fg:w="3"/><text x="1.2382%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.9882%" y="197" width="0.0131%" height="15" fill="rgb(239,60,40)" fg:x="226" fg:w="3"/><text x="1.2382%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.9882%" y="181" width="0.0131%" height="15" fill="rgb(206,27,48)" fg:x="226" fg:w="3"/><text x="1.2382%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.9882%" y="165" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="226" fg:w="3"/><text x="1.2382%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.9882%" y="149" width="0.0131%" height="15" fill="rgb(250,213,24)" fg:x="226" fg:w="3"/><text x="1.2382%" y="159.50"></text></g><g><title>`0x7FFEAD84776D (3 samples, 0.01%)</title><rect x="0.9882%" y="133" width="0.0131%" height="15" fill="rgb(247,123,22)" fg:x="226" fg:w="3"/><text x="1.2382%" y="143.50"></text></g><g><title>`0x7FFEAD847A15 (3 samples, 0.01%)</title><rect x="0.9882%" y="117" width="0.0131%" height="15" fill="rgb(231,138,38)" fg:x="226" fg:w="3"/><text x="1.2382%" y="127.50"></text></g><g><title>`0x7FFEAD848979 (3 samples, 0.01%)</title><rect x="0.9882%" y="101" width="0.0131%" height="15" fill="rgb(231,145,46)" fg:x="226" fg:w="3"/><text x="1.2382%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::resize (4 samples, 0.02%)</title><rect x="0.9882%" y="325" width="0.0175%" height="15" fill="rgb(251,118,11)" fg:x="226" fg:w="4"/><text x="1.2382%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::extend_with (4 samples, 0.02%)</title><rect x="0.9882%" y="309" width="0.0175%" height="15" fill="rgb(217,147,25)" fg:x="226" fg:w="4"/><text x="1.2382%" y="319.50"></text></g><g><title>`0x7FFEAD967893 (34 samples, 0.15%)</title><rect x="1.0145%" y="85" width="0.1487%" height="15" fill="rgb(247,81,37)" fg:x="232" fg:w="34"/><text x="1.2645%" y="95.50"></text></g><g><title>`0x7FFEAD967897 (23 samples, 0.10%)</title><rect x="1.1631%" y="85" width="0.1006%" height="15" fill="rgb(209,12,38)" fg:x="266" fg:w="23"/><text x="1.4131%" y="95.50"></text></g><g><title>`0x7FFEAD848979 (64 samples, 0.28%)</title><rect x="1.0057%" y="101" width="0.2799%" height="15" fill="rgb(227,1,9)" fg:x="230" fg:w="64"/><text x="1.2557%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::reserve (77 samples, 0.34%)</title><rect x="1.0057%" y="293" width="0.3367%" height="15" fill="rgb(248,47,43)" fg:x="230" fg:w="77"/><text x="1.2557%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve (77 samples, 0.34%)</title><rect x="1.0057%" y="277" width="0.3367%" height="15" fill="rgb(221,10,30)" fg:x="230" fg:w="77"/><text x="1.2557%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (77 samples, 0.34%)</title><rect x="1.0057%" y="261" width="0.3367%" height="15" fill="rgb(210,229,1)" fg:x="230" fg:w="77"/><text x="1.2557%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (77 samples, 0.34%)</title><rect x="1.0057%" y="245" width="0.3367%" height="15" fill="rgb(222,148,37)" fg:x="230" fg:w="77"/><text x="1.2557%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (77 samples, 0.34%)</title><rect x="1.0057%" y="229" width="0.3367%" height="15" fill="rgb(234,67,33)" fg:x="230" fg:w="77"/><text x="1.2557%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (77 samples, 0.34%)</title><rect x="1.0057%" y="213" width="0.3367%" height="15" fill="rgb(247,98,35)" fg:x="230" fg:w="77"/><text x="1.2557%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (77 samples, 0.34%)</title><rect x="1.0057%" y="197" width="0.3367%" height="15" fill="rgb(247,138,52)" fg:x="230" fg:w="77"/><text x="1.2557%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (77 samples, 0.34%)</title><rect x="1.0057%" y="181" width="0.3367%" height="15" fill="rgb(213,79,30)" fg:x="230" fg:w="77"/><text x="1.2557%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (77 samples, 0.34%)</title><rect x="1.0057%" y="165" width="0.3367%" height="15" fill="rgb(246,177,23)" fg:x="230" fg:w="77"/><text x="1.2557%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (77 samples, 0.34%)</title><rect x="1.0057%" y="149" width="0.3367%" height="15" fill="rgb(230,62,27)" fg:x="230" fg:w="77"/><text x="1.2557%" y="159.50"></text></g><g><title>`0x7FFEAD84776D (77 samples, 0.34%)</title><rect x="1.0057%" y="133" width="0.3367%" height="15" fill="rgb(216,154,8)" fg:x="230" fg:w="77"/><text x="1.2557%" y="143.50"></text></g><g><title>`0x7FFEAD847A15 (77 samples, 0.34%)</title><rect x="1.0057%" y="117" width="0.3367%" height="15" fill="rgb(244,35,45)" fg:x="230" fg:w="77"/><text x="1.2557%" y="127.50"></text></g><g><title>`0x7FFEAD84898C (13 samples, 0.06%)</title><rect x="1.2856%" y="101" width="0.0568%" height="15" fill="rgb(251,115,12)" fg:x="294" fg:w="13"/><text x="1.5356%" y="111.50"></text></g><g><title>`0x7FFEAD8806E0 (13 samples, 0.06%)</title><rect x="1.2856%" y="85" width="0.0568%" height="15" fill="rgb(240,54,50)" fg:x="294" fg:w="13"/><text x="1.5356%" y="95.50"></text></g><g><title>`0x7FFEAD81CCD8 (12 samples, 0.05%)</title><rect x="1.2900%" y="69" width="0.0525%" height="15" fill="rgb(233,84,52)" fg:x="295" fg:w="12"/><text x="1.5400%" y="79.50"></text></g><g><title>`0x7FFEAD872D2F (12 samples, 0.05%)</title><rect x="1.2900%" y="53" width="0.0525%" height="15" fill="rgb(207,117,47)" fg:x="295" fg:w="12"/><text x="1.5400%" y="63.50"></text></g><g><title>`0x7FFEAD962334 (12 samples, 0.05%)</title><rect x="1.2900%" y="37" width="0.0525%" height="15" fill="rgb(249,43,39)" fg:x="295" fg:w="12"/><text x="1.5400%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::resize (149 samples, 0.65%)</title><rect x="1.0057%" y="325" width="0.6515%" height="15" fill="rgb(209,38,44)" fg:x="230" fg:w="149"/><text x="1.2557%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_with (149 samples, 0.65%)</title><rect x="1.0057%" y="309" width="0.6515%" height="15" fill="rgb(236,212,23)" fg:x="230" fg:w="149"/><text x="1.2557%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (72 samples, 0.31%)</title><rect x="1.3424%" y="293" width="0.3148%" height="15" fill="rgb(242,79,21)" fg:x="307" fg:w="72"/><text x="1.5924%" y="303.50"></text></g><g><title>`0x7FFE8DAB1A89 (72 samples, 0.31%)</title><rect x="1.3424%" y="277" width="0.3148%" height="15" fill="rgb(211,96,35)" fg:x="307" fg:w="72"/><text x="1.5924%" y="287.50"></text></g><g><title>`0x7FFEAD967893 (18 samples, 0.08%)</title><rect x="1.6660%" y="85" width="0.0787%" height="15" fill="rgb(253,215,40)" fg:x="381" fg:w="18"/><text x="1.9160%" y="95.50"></text></g><g><title>`0x7FFEAD967897 (13 samples, 0.06%)</title><rect x="1.7447%" y="85" width="0.0568%" height="15" fill="rgb(211,81,21)" fg:x="399" fg:w="13"/><text x="1.9947%" y="95.50"></text></g><g><title>`0x7FFEAD848979 (34 samples, 0.15%)</title><rect x="1.6573%" y="101" width="0.1487%" height="15" fill="rgb(208,190,38)" fg:x="379" fg:w="34"/><text x="1.9073%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.6573%" y="293" width="0.1749%" height="15" fill="rgb(235,213,38)" fg:x="379" fg:w="40"/><text x="1.9073%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;isize,alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.6573%" y="277" width="0.1749%" height="15" fill="rgb(237,122,38)" fg:x="379" fg:w="40"/><text x="1.9073%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.6573%" y="261" width="0.1749%" height="15" fill="rgb(244,218,35)" fg:x="379" fg:w="40"/><text x="1.9073%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (40 samples, 0.17%)</title><rect x="1.6573%" y="245" width="0.1749%" height="15" fill="rgb(240,68,47)" fg:x="379" fg:w="40"/><text x="1.9073%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (40 samples, 0.17%)</title><rect x="1.6573%" y="229" width="0.1749%" height="15" fill="rgb(210,16,53)" fg:x="379" fg:w="40"/><text x="1.9073%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (40 samples, 0.17%)</title><rect x="1.6573%" y="213" width="0.1749%" height="15" fill="rgb(235,124,12)" fg:x="379" fg:w="40"/><text x="1.9073%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.6573%" y="197" width="0.1749%" height="15" fill="rgb(224,169,11)" fg:x="379" fg:w="40"/><text x="1.9073%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.6573%" y="181" width="0.1749%" height="15" fill="rgb(250,166,2)" fg:x="379" fg:w="40"/><text x="1.9073%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.6573%" y="165" width="0.1749%" height="15" fill="rgb(242,216,29)" fg:x="379" fg:w="40"/><text x="1.9073%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.6573%" y="149" width="0.1749%" height="15" fill="rgb(230,116,27)" fg:x="379" fg:w="40"/><text x="1.9073%" y="159.50"></text></g><g><title>`0x7FFEAD84776D (40 samples, 0.17%)</title><rect x="1.6573%" y="133" width="0.1749%" height="15" fill="rgb(228,99,48)" fg:x="379" fg:w="40"/><text x="1.9073%" y="143.50"></text></g><g><title>`0x7FFEAD847A15 (40 samples, 0.17%)</title><rect x="1.6573%" y="117" width="0.1749%" height="15" fill="rgb(253,11,6)" fg:x="379" fg:w="40"/><text x="1.9073%" y="127.50"></text></g><g><title>`0x7FFEAD84898C (6 samples, 0.03%)</title><rect x="1.8059%" y="101" width="0.0262%" height="15" fill="rgb(247,143,39)" fg:x="413" fg:w="6"/><text x="2.0559%" y="111.50"></text></g><g><title>`0x7FFEAD8806E0 (6 samples, 0.03%)</title><rect x="1.8059%" y="85" width="0.0262%" height="15" fill="rgb(236,97,10)" fg:x="413" fg:w="6"/><text x="2.0559%" y="95.50"></text></g><g><title>`0x7FFEAD81CCD8 (6 samples, 0.03%)</title><rect x="1.8059%" y="69" width="0.0262%" height="15" fill="rgb(233,208,19)" fg:x="413" fg:w="6"/><text x="2.0559%" y="79.50"></text></g><g><title>`0x7FFEAD872D2F (6 samples, 0.03%)</title><rect x="1.8059%" y="53" width="0.0262%" height="15" fill="rgb(216,164,2)" fg:x="413" fg:w="6"/><text x="2.0559%" y="63.50"></text></g><g><title>`0x7FFEAD962334 (6 samples, 0.03%)</title><rect x="1.8059%" y="37" width="0.0262%" height="15" fill="rgb(220,129,5)" fg:x="413" fg:w="6"/><text x="2.0559%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::resize (77 samples, 0.34%)</title><rect x="1.6573%" y="325" width="0.3367%" height="15" fill="rgb(242,17,10)" fg:x="379" fg:w="77"/><text x="1.9073%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::extend_with (77 samples, 0.34%)</title><rect x="1.6573%" y="309" width="0.3367%" height="15" fill="rgb(242,107,0)" fg:x="379" fg:w="77"/><text x="1.9073%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (37 samples, 0.16%)</title><rect x="1.8322%" y="293" width="0.1618%" height="15" fill="rgb(251,28,31)" fg:x="419" fg:w="37"/><text x="2.0822%" y="303.50"></text></g><g><title>`0x7FFE8DAB1A89 (37 samples, 0.16%)</title><rect x="1.8322%" y="277" width="0.1618%" height="15" fill="rgb(233,223,10)" fg:x="419" fg:w="37"/><text x="2.0822%" y="287.50"></text></g><g><title>`0x7FFEAD967893 (18 samples, 0.08%)</title><rect x="2.0027%" y="85" width="0.0787%" height="15" fill="rgb(215,21,27)" fg:x="458" fg:w="18"/><text x="2.2527%" y="95.50"></text></g><g><title>`0x7FFEAD967897 (11 samples, 0.05%)</title><rect x="2.0814%" y="85" width="0.0481%" height="15" fill="rgb(232,23,21)" fg:x="476" fg:w="11"/><text x="2.3314%" y="95.50"></text></g><g><title>`0x7FFEAD848979 (32 samples, 0.14%)</title><rect x="1.9983%" y="101" width="0.1399%" height="15" fill="rgb(244,5,23)" fg:x="457" fg:w="32"/><text x="2.2483%" y="111.50"></text></g><g><title>`0x7FFEAD81C136 (3 samples, 0.01%)</title><rect x="2.1383%" y="69" width="0.0131%" height="15" fill="rgb(226,81,46)" fg:x="489" fg:w="3"/><text x="2.3883%" y="79.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.9940%" y="293" width="0.1749%" height="15" fill="rgb(247,70,30)" fg:x="456" fg:w="40"/><text x="2.2440%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.9940%" y="277" width="0.1749%" height="15" fill="rgb(212,68,19)" fg:x="456" fg:w="40"/><text x="2.2440%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (40 samples, 0.17%)</title><rect x="1.9940%" y="261" width="0.1749%" height="15" fill="rgb(240,187,13)" fg:x="456" fg:w="40"/><text x="2.2440%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (40 samples, 0.17%)</title><rect x="1.9940%" y="245" width="0.1749%" height="15" fill="rgb(223,113,26)" fg:x="456" fg:w="40"/><text x="2.2440%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (40 samples, 0.17%)</title><rect x="1.9940%" y="229" width="0.1749%" height="15" fill="rgb(206,192,2)" fg:x="456" fg:w="40"/><text x="2.2440%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (40 samples, 0.17%)</title><rect x="1.9940%" y="213" width="0.1749%" height="15" fill="rgb(241,108,4)" fg:x="456" fg:w="40"/><text x="2.2440%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.9940%" y="197" width="0.1749%" height="15" fill="rgb(247,173,49)" fg:x="456" fg:w="40"/><text x="2.2440%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.9940%" y="181" width="0.1749%" height="15" fill="rgb(224,114,35)" fg:x="456" fg:w="40"/><text x="2.2440%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.9940%" y="165" width="0.1749%" height="15" fill="rgb(245,159,27)" fg:x="456" fg:w="40"/><text x="2.2440%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (40 samples, 0.17%)</title><rect x="1.9940%" y="149" width="0.1749%" height="15" fill="rgb(245,172,44)" fg:x="456" fg:w="40"/><text x="2.2440%" y="159.50"></text></g><g><title>`0x7FFEAD84776D (40 samples, 0.17%)</title><rect x="1.9940%" y="133" width="0.1749%" height="15" fill="rgb(236,23,11)" fg:x="456" fg:w="40"/><text x="2.2440%" y="143.50"></text></g><g><title>`0x7FFEAD847A15 (40 samples, 0.17%)</title><rect x="1.9940%" y="117" width="0.1749%" height="15" fill="rgb(205,117,38)" fg:x="456" fg:w="40"/><text x="2.2440%" y="127.50"></text></g><g><title>`0x7FFEAD84898C (7 samples, 0.03%)</title><rect x="2.1383%" y="101" width="0.0306%" height="15" fill="rgb(237,72,25)" fg:x="489" fg:w="7"/><text x="2.3883%" y="111.50"></text></g><g><title>`0x7FFEAD8806E0 (7 samples, 0.03%)</title><rect x="2.1383%" y="85" width="0.0306%" height="15" fill="rgb(244,70,9)" fg:x="489" fg:w="7"/><text x="2.3883%" y="95.50"></text></g><g><title>`0x7FFEAD81CCD8 (4 samples, 0.02%)</title><rect x="2.1514%" y="69" width="0.0175%" height="15" fill="rgb(217,125,39)" fg:x="492" fg:w="4"/><text x="2.4014%" y="79.50"></text></g><g><title>`0x7FFEAD872D2F (4 samples, 0.02%)</title><rect x="2.1514%" y="53" width="0.0175%" height="15" fill="rgb(235,36,10)" fg:x="492" fg:w="4"/><text x="2.4014%" y="63.50"></text></g><g><title>`0x7FFEAD962334 (4 samples, 0.02%)</title><rect x="2.1514%" y="37" width="0.0175%" height="15" fill="rgb(251,123,47)" fg:x="492" fg:w="4"/><text x="2.4014%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::resize (77 samples, 0.34%)</title><rect x="1.9940%" y="325" width="0.3367%" height="15" fill="rgb(221,13,13)" fg:x="456" fg:w="77"/><text x="2.2440%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::extend_with (77 samples, 0.34%)</title><rect x="1.9940%" y="309" width="0.3367%" height="15" fill="rgb(238,131,9)" fg:x="456" fg:w="77"/><text x="2.2440%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (37 samples, 0.16%)</title><rect x="2.1689%" y="293" width="0.1618%" height="15" fill="rgb(211,50,8)" fg:x="496" fg:w="37"/><text x="2.4189%" y="303.50"></text></g><g><title>`0x7FFE8DAB1A89 (37 samples, 0.16%)</title><rect x="2.1689%" y="277" width="0.1618%" height="15" fill="rgb(245,182,24)" fg:x="496" fg:w="37"/><text x="2.4189%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_slice (3 samples, 0.01%)</title><rect x="2.3307%" y="293" width="0.0131%" height="15" fill="rgb(242,14,37)" fg:x="533" fg:w="3"/><text x="2.5807%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_mut_slice (3 samples, 0.01%)</title><rect x="2.3438%" y="293" width="0.0131%" height="15" fill="rgb(246,228,12)" fg:x="536" fg:w="3"/><text x="2.5938%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_slice (7 samples, 0.03%)</title><rect x="2.3569%" y="293" width="0.0306%" height="15" fill="rgb(213,55,15)" fg:x="539" fg:w="7"/><text x="2.6069%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::genbox::genbox&lt;1000&gt;(unsigned long long*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec (393 samples, 1.72%)</title><rect x="0.6734%" y="341" width="1.7185%" height="15" fill="rgb(209,9,3)" fg:x="154" fg:w="393"/><text x="0.9234%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (14 samples, 0.06%)</title><rect x="2.3307%" y="325" width="0.0612%" height="15" fill="rgb(230,59,30)" fg:x="533" fg:w="14"/><text x="2.5807%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (14 samples, 0.06%)</title><rect x="2.3307%" y="309" width="0.0612%" height="15" fill="rgb(209,121,21)" fg:x="533" fg:w="14"/><text x="2.5807%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (3 samples, 0.01%)</title><rect x="2.3919%" y="341" width="0.0131%" height="15" fill="rgb(220,109,13)" fg:x="547" fg:w="3"/><text x="2.6419%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (3 samples, 0.01%)</title><rect x="2.3919%" y="325" width="0.0131%" height="15" fill="rgb(232,18,1)" fg:x="547" fg:w="3"/><text x="2.6419%" y="335.50"></text></g><g><title>`0x7FFEAAA37C66 (5 samples, 0.02%)</title><rect x="3.1440%" y="277" width="0.0219%" height="15" fill="rgb(215,41,42)" fg:x="719" fg:w="5"/><text x="3.3940%" y="287.50"></text></g><g><title>`0x7FFEAAA37CA5 (3 samples, 0.01%)</title><rect x="3.1659%" y="277" width="0.0131%" height="15" fill="rgb(224,123,36)" fg:x="724" fg:w="3"/><text x="3.4159%" y="287.50"></text></g><g><title>`0x7FFEAAA37CB2 (5 samples, 0.02%)</title><rect x="3.1790%" y="277" width="0.0219%" height="15" fill="rgb(240,125,3)" fg:x="727" fg:w="5"/><text x="3.4290%" y="287.50"></text></g><g><title>`0x7FFEAAA37CDB (5 samples, 0.02%)</title><rect x="3.2096%" y="277" width="0.0219%" height="15" fill="rgb(205,98,50)" fg:x="734" fg:w="5"/><text x="3.4596%" y="287.50"></text></g><g><title>`0x7FFEAAA37CE4 (4 samples, 0.02%)</title><rect x="3.2314%" y="277" width="0.0175%" height="15" fill="rgb(205,185,37)" fg:x="739" fg:w="4"/><text x="3.4814%" y="287.50"></text></g><g><title>`0x7FFEAAA37CED (7 samples, 0.03%)</title><rect x="3.2489%" y="277" width="0.0306%" height="15" fill="rgb(238,207,15)" fg:x="743" fg:w="7"/><text x="3.4989%" y="287.50"></text></g><g><title>`0x7FFEAAA37CF6 (6 samples, 0.03%)</title><rect x="3.2795%" y="277" width="0.0262%" height="15" fill="rgb(213,199,42)" fg:x="750" fg:w="6"/><text x="3.5295%" y="287.50"></text></g><g><title>`0x7FFEAAA37CFF (4 samples, 0.02%)</title><rect x="3.3058%" y="277" width="0.0175%" height="15" fill="rgb(235,201,11)" fg:x="756" fg:w="4"/><text x="3.5558%" y="287.50"></text></g><g><title>`0x7FFEAAA37D1F (3 samples, 0.01%)</title><rect x="3.3233%" y="277" width="0.0131%" height="15" fill="rgb(207,46,11)" fg:x="760" fg:w="3"/><text x="3.5733%" y="287.50"></text></g><g><title>`0x7FFEAAA37D25 (3 samples, 0.01%)</title><rect x="3.3364%" y="277" width="0.0131%" height="15" fill="rgb(241,35,35)" fg:x="763" fg:w="3"/><text x="3.5864%" y="287.50"></text></g><g><title>`0x7FFEAAA37D2B (3 samples, 0.01%)</title><rect x="3.3495%" y="277" width="0.0131%" height="15" fill="rgb(243,32,47)" fg:x="766" fg:w="3"/><text x="3.5995%" y="287.50"></text></g><g><title>`0x7FFEAAA37D3A (6 samples, 0.03%)</title><rect x="3.3626%" y="277" width="0.0262%" height="15" fill="rgb(247,202,23)" fg:x="769" fg:w="6"/><text x="3.6126%" y="287.50"></text></g><g><title>`0x7FFEAAA37A09 (5 samples, 0.02%)</title><rect x="3.4020%" y="261" width="0.0219%" height="15" fill="rgb(219,102,11)" fg:x="778" fg:w="5"/><text x="3.6520%" y="271.50"></text></g><g><title>`0x7FFEAAA37C50 (3 samples, 0.01%)</title><rect x="3.4326%" y="261" width="0.0131%" height="15" fill="rgb(243,110,44)" fg:x="785" fg:w="3"/><text x="3.6826%" y="271.50"></text></g><g><title>`0x7FFEAAA37C62 (6 samples, 0.03%)</title><rect x="3.4457%" y="261" width="0.0262%" height="15" fill="rgb(222,74,54)" fg:x="788" fg:w="6"/><text x="3.6957%" y="271.50"></text></g><g><title>`0x7FFEAAA37C97 (6 samples, 0.03%)</title><rect x="3.4763%" y="261" width="0.0262%" height="15" fill="rgb(216,99,12)" fg:x="795" fg:w="6"/><text x="3.7263%" y="271.50"></text></g><g><title>`0x7FFEAAA37CF6 (7 samples, 0.03%)</title><rect x="3.5332%" y="261" width="0.0306%" height="15" fill="rgb(226,22,26)" fg:x="808" fg:w="7"/><text x="3.7832%" y="271.50"></text></g><g><title>`0x7FFEAAA37D1F (5 samples, 0.02%)</title><rect x="3.5813%" y="261" width="0.0219%" height="15" fill="rgb(217,163,10)" fg:x="819" fg:w="5"/><text x="3.8313%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::exp (60 samples, 0.26%)</title><rect x="3.3889%" y="277" width="0.2624%" height="15" fill="rgb(213,25,53)" fg:x="775" fg:w="60"/><text x="3.6389%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`exp (6 samples, 0.03%)</title><rect x="3.6250%" y="261" width="0.0262%" height="15" fill="rgb(252,105,26)" fg:x="829" fg:w="6"/><text x="3.8750%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (294 samples, 1.29%)</title><rect x="2.4050%" y="341" width="1.2856%" height="15" fill="rgb(220,39,43)" fg:x="550" fg:w="294"/><text x="2.6550%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (294 samples, 1.29%)</title><rect x="2.4050%" y="325" width="1.2856%" height="15" fill="rgb(229,68,48)" fg:x="550" fg:w="294"/><text x="2.6550%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_slice (294 samples, 1.29%)</title><rect x="2.4050%" y="309" width="1.2856%" height="15" fill="rgb(252,8,32)" fg:x="550" fg:w="294"/><text x="2.6550%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::hm6&lt;6&gt;(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (294 samples, 1.29%)</title><rect x="2.4050%" y="293" width="1.2856%" height="15" fill="rgb(223,20,43)" fg:x="550" fg:w="294"/><text x="2.6550%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::powi (9 samples, 0.04%)</title><rect x="3.6512%" y="277" width="0.0394%" height="15" fill="rgb(229,81,49)" fg:x="835" fg:w="9"/><text x="3.9012%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split&lt;6,1000&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), unsigned long long, unsigned long long, unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double[6]*, double, double, alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (720 samples, 3.15%)</title><rect x="0.5641%" y="357" width="3.1484%" height="15" fill="rgb(236,28,36)" fg:x="129" fg:w="720"/><text x="0.8141%" y="367.50">ben..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$42::clone(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (5 samples, 0.02%)</title><rect x="3.6906%" y="341" width="0.0219%" height="15" fill="rgb(249,185,26)" fg:x="844" fg:w="5"/><text x="3.9406%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::Ord::min (709 samples, 3.10%)</title><rect x="31.4399%" y="341" width="3.1003%" height="15" fill="rgb(249,174,33)" fg:x="7190" fg:w="709"/><text x="31.6899%" y="351.50">ben..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::strtsw::strtsw&lt;1000&gt;(unsigned long long[1000]*, ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (8,215 samples, 35.92%)</title><rect x="3.7124%" y="357" width="35.9220%" height="15" fill="rgb(233,201,37)" fg:x="849" fg:w="8215"/><text x="3.9624%" y="367.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::strts..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::range::impl$6::next(core::ops::range::Range (1,165 samples, 5.09%)</title><rect x="34.5402%" y="341" width="5.0942%" height="15" fill="rgb(221,78,26)" fg:x="7899" fg:w="1165"/><text x="34.7902%" y="351.50">benchm..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (1,165 samples, 5.09%)</title><rect x="34.5402%" y="325" width="5.0942%" height="15" fill="rgb(250,127,30)" fg:x="7899" fg:w="1165"/><text x="34.7902%" y="335.50">benchm..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$58::lt (1,165 samples, 5.09%)</title><rect x="34.5402%" y="309" width="5.0942%" height="15" fill="rgb(230,49,44)" fg:x="7899" fg:w="1165"/><text x="34.7902%" y="319.50">benchm..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtrec::updtrec(unsigned long long, unsigned long long, ref$&lt;slice2$ (11 samples, 0.05%)</title><rect x="39.6344%" y="357" width="0.0481%" height="15" fill="rgb(229,67,23)" fg:x="9064" fg:w="11"/><text x="39.8844%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::from_elem (4 samples, 0.02%)</title><rect x="39.6913%" y="357" width="0.0175%" height="15" fill="rgb(249,83,47)" fg:x="9077" fg:w="4"/><text x="39.9413%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_elem::impl$1::from_elem (4 samples, 0.02%)</title><rect x="39.6913%" y="341" width="0.0175%" height="15" fill="rgb(215,43,3)" fg:x="9077" fg:w="4"/><text x="39.9413%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_slice (12 samples, 0.05%)</title><rect x="39.7131%" y="325" width="0.0525%" height="15" fill="rgb(238,154,13)" fg:x="9082" fg:w="12"/><text x="39.9631%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_slice (6 samples, 0.03%)</title><rect x="39.7656%" y="325" width="0.0262%" height="15" fill="rgb(219,56,2)" fg:x="9094" fg:w="6"/><text x="40.0156%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (29 samples, 0.13%)</title><rect x="39.7088%" y="357" width="0.1268%" height="15" fill="rgb(233,0,4)" fg:x="9081" fg:w="29"/><text x="39.9588%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (29 samples, 0.13%)</title><rect x="39.7088%" y="341" width="0.1268%" height="15" fill="rgb(235,30,7)" fg:x="9081" fg:w="29"/><text x="39.9588%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (10 samples, 0.04%)</title><rect x="39.7919%" y="325" width="0.0437%" height="15" fill="rgb(250,79,13)" fg:x="9100" fg:w="10"/><text x="40.0419%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_slice (7 samples, 0.03%)</title><rect x="39.8356%" y="325" width="0.0306%" height="15" fill="rgb(211,146,34)" fg:x="9110" fg:w="7"/><text x="40.0856%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::polint::polint (11 samples, 0.05%)</title><rect x="39.9624%" y="293" width="0.0481%" height="15" fill="rgb(228,22,38)" fg:x="9139" fg:w="11"/><text x="40.2124%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadpol (52 samples, 0.23%)</title><rect x="40.0105%" y="293" width="0.2274%" height="15" fill="rgb(235,168,5)" fg:x="9150" fg:w="52"/><text x="40.2605%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadmin (42 samples, 0.18%)</title><rect x="40.0542%" y="277" width="0.1837%" height="15" fill="rgb(221,155,16)" fg:x="9160" fg:w="42"/><text x="40.3042%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadpol (32 samples, 0.14%)</title><rect x="40.0979%" y="261" width="0.1399%" height="15" fill="rgb(215,215,53)" fg:x="9170" fg:w="32"/><text x="40.3479%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::subint::subint (7 samples, 0.03%)</title><rect x="40.2379%" y="293" width="0.0306%" height="15" fill="rgb(223,4,10)" fg:x="9202" fg:w="7"/><text x="40.4879%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::f64::impl$0::abs (3 samples, 0.01%)</title><rect x="40.2554%" y="277" width="0.0131%" height="15" fill="rgb(234,103,6)" fg:x="9206" fg:w="3"/><text x="40.5054%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::exgain::exgain&lt;6&gt;(unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double[6]*, double[6]*, double[6]*, double, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (94 samples, 0.41%)</title><rect x="39.8662%" y="309" width="0.4110%" height="15" fill="rgb(227,97,0)" fg:x="9117" fg:w="94"/><text x="40.1162%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_mut_slice (147 samples, 0.64%)</title><rect x="39.8662%" y="325" width="0.6428%" height="15" fill="rgb(234,150,53)" fg:x="9117" fg:w="147"/><text x="40.1162%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::splrnk::splrnk&lt;6&gt;(unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;usize,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;usize,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (53 samples, 0.23%)</title><rect x="40.2772%" y="309" width="0.2318%" height="15" fill="rgb(228,201,54)" fg:x="9211" fg:w="53"/><text x="40.5272%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split2 (23 samples, 0.10%)</title><rect x="40.4084%" y="293" width="0.1006%" height="15" fill="rgb(222,22,37)" fg:x="9241" fg:w="23"/><text x="40.6584%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (161 samples, 0.70%)</title><rect x="39.8356%" y="357" width="0.7040%" height="15" fill="rgb(237,53,32)" fg:x="9110" fg:w="161"/><text x="40.0856%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (161 samples, 0.70%)</title><rect x="39.8356%" y="341" width="0.7040%" height="15" fill="rgb(233,25,53)" fg:x="9110" fg:w="161"/><text x="40.0856%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_slice (7 samples, 0.03%)</title><rect x="40.5090%" y="325" width="0.0306%" height="15" fill="rgb(210,40,34)" fg:x="9264" fg:w="7"/><text x="40.7590%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_ptr (6 samples, 0.03%)</title><rect x="40.5134%" y="309" width="0.0262%" height="15" fill="rgb(241,220,44)" fg:x="9265" fg:w="6"/><text x="40.7634%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (6 samples, 0.03%)</title><rect x="40.5134%" y="293" width="0.0262%" height="15" fill="rgb(235,28,35)" fg:x="9265" fg:w="6"/><text x="40.7634%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (6 samples, 0.03%)</title><rect x="40.5134%" y="277" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="9265" fg:w="6"/><text x="40.7634%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (6 samples, 0.03%)</title><rect x="40.5134%" y="261" width="0.0262%" height="15" fill="rgb(224,130,29)" fg:x="9265" fg:w="6"/><text x="40.7634%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="357" width="0.0175%" height="15" fill="rgb(235,212,8)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, Rust_MCS::mcs_utils::chk_locks::chkloc::closure_env$0 (4 samples, 0.02%)</title><rect x="40.5440%" y="341" width="0.0175%" height="15" fill="rgb(223,33,50)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::chk_locks::chkloc::closure$0(Rust_MCS::mcs_utils::chk_locks::chkloc::closure_env$0&lt;6&gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="325" width="0.0175%" height="15" fill="rgb(219,149,13)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$9::eq(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;**, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="309" width="0.0175%" height="15" fill="rgb(250,156,29)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$31::eq(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="293" width="0.0175%" height="15" fill="rgb(216,193,19)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::all(core::iter::adapters::zip::Zip&lt;nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="277" width="0.0175%" height="15" fill="rgb(216,135,14)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::try_fold(core::iter::adapters::zip::Zip&lt;nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;f64&gt;,ref$&lt;f64&gt; &gt;,nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage (4 samples, 0.02%)</title><rect x="40.5440%" y="261" width="0.0175%" height="15" fill="rgb(241,47,5)" fg:x="9272" fg:w="4"/><text x="40.7940%" y="271.50"></text></g><g><title>`0x7FFEAAA38106 (42 samples, 0.18%)</title><rect x="70.9869%" y="197" width="0.1837%" height="15" fill="rgb(233,42,35)" fg:x="16234" fg:w="42"/><text x="71.2369%" y="207.50"></text></g><g><title>`0x7FFEAAA38126 (15 samples, 0.07%)</title><rect x="71.1706%" y="197" width="0.0656%" height="15" fill="rgb(231,13,6)" fg:x="16276" fg:w="15"/><text x="71.4206%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split1 (65 samples, 0.28%)</title><rect x="71.2449%" y="197" width="0.2842%" height="15" fill="rgb(207,181,40)" fg:x="16293" fg:w="65"/><text x="71.4949%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtf::updtf&lt;6&gt; (1,479 samples, 6.47%)</title><rect x="71.5291%" y="197" width="6.4673%" height="15" fill="rgb(254,173,49)" fg:x="16358" fg:w="1479"/><text x="71.7791%" y="207.50">benchmar..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::vertex::vert3(unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (3 samples, 0.01%)</title><rect x="77.9964%" y="197" width="0.0131%" height="15" fill="rgb(221,1,38)" fg:x="17837" fg:w="3"/><text x="78.2464%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (3,398 samples, 14.86%)</title><rect x="78.0095%" y="197" width="14.8585%" height="15" fill="rgb(206,124,46)" fg:x="17840" fg:w="3398"/><text x="78.2595%" y="207.50">benchmarks-86e11159e9a0..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (2,644 samples, 11.56%)</title><rect x="81.3066%" y="181" width="11.5615%" height="15" fill="rgb(249,21,11)" fg:x="18594" fg:w="2644"/><text x="81.5566%" y="191.50">benchmarks-86e111..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (2,644 samples, 11.56%)</title><rect x="81.3066%" y="165" width="11.5615%" height="15" fill="rgb(222,201,40)" fg:x="18594" fg:w="2644"/><text x="81.5566%" y="175.50">benchmarks-86e111..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtf::updtf&lt;6&gt; (1,327 samples, 5.80%)</title><rect x="87.0655%" y="149" width="5.8026%" height="15" fill="rgb(235,61,29)" fg:x="19911" fg:w="1327"/><text x="87.3155%" y="159.50">benchma..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`ceil (10 samples, 0.04%)</title><rect x="92.8681%" y="197" width="0.0437%" height="15" fill="rgb(219,207,3)" fg:x="21238" fg:w="10"/><text x="93.1181%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::num::impl$5::abs (1,511 samples, 6.61%)</title><rect x="92.9118%" y="197" width="6.6072%" height="15" fill="rgb(222,56,46)" fg:x="21248" fg:w="1511"/><text x="93.1618%" y="207.50">benchmark..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::num::impl$5::is_negative (13 samples, 0.06%)</title><rect x="99.4622%" y="181" width="0.0568%" height="15" fill="rgb(239,76,54)" fg:x="22746" fg:w="13"/><text x="99.7122%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::impl$0::fill(ref_mut$&lt;slice2$ (17 samples, 0.07%)</title><rect x="99.5190%" y="197" width="0.0743%" height="15" fill="rgb(231,124,27)" fg:x="22759" fg:w="17"/><text x="99.7690%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::specialize::impl$1::spec_fill(ref_mut$&lt;slice2$ (17 samples, 0.07%)</title><rect x="99.5190%" y="181" width="0.0743%" height="15" fill="rgb(249,195,6)" fg:x="22759" fg:w="17"/><text x="99.7690%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`floor (9 samples, 0.04%)</title><rect x="99.5933%" y="197" width="0.0394%" height="15" fill="rgb(237,174,47)" fg:x="22776" fg:w="9"/><text x="99.8433%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;::fill (3 samples, 0.01%)</title><rect x="99.6327%" y="197" width="0.0131%" height="15" fill="rgb(206,201,31)" fg:x="22785" fg:w="3"/><text x="99.8827%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::ops::impl$1::index(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;*, tuple$ (10 samples, 0.04%)</title><rect x="99.6458%" y="197" width="0.0437%" height="15" fill="rgb(231,57,52)" fg:x="22788" fg:w="10"/><text x="99.8958%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::get_unchecked(tuple$ (9 samples, 0.04%)</title><rect x="99.6502%" y="181" width="0.0394%" height="15" fill="rgb(248,177,22)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::indexing::impl$11::get_unchecked(tuple$&lt;usize,usize&gt;, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (9 samples, 0.04%)</title><rect x="99.6502%" y="165" width="0.0394%" height="15" fill="rgb(215,211,37)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_unchecked(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (9 samples, 0.04%)</title><rect x="99.6502%" y="149" width="0.0394%" height="15" fill="rgb(241,128,51)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="159.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_unchecked_linear(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (9 samples, 0.04%)</title><rect x="99.6502%" y="133" width="0.0394%" height="15" fill="rgb(227,165,31)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="143.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_address_unchecked_linear(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (9 samples, 0.04%)</title><rect x="99.6502%" y="117" width="0.0394%" height="15" fill="rgb(228,167,24)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="127.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::const_ptr::impl$0::wrapping_add (9 samples, 0.04%)</title><rect x="99.6502%" y="101" width="0.0394%" height="15" fill="rgb(228,143,12)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::const_ptr::impl$0::wrapping_offset (9 samples, 0.04%)</title><rect x="99.6502%" y="85" width="0.0394%" height="15" fill="rgb(249,149,8)" fg:x="22789" fg:w="9"/><text x="99.9002%" y="95.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::ops::impl$1::index(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, tuple$ (9 samples, 0.04%)</title><rect x="99.6895%" y="197" width="0.0394%" height="15" fill="rgb(243,35,44)" fg:x="22798" fg:w="9"/><text x="99.9395%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::ceil (3 samples, 0.01%)</title><rect x="99.7289%" y="197" width="0.0131%" height="15" fill="rgb(246,89,9)" fg:x="22807" fg:w="3"/><text x="99.9789%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::vertex::vertex&lt;6&gt;(unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;*, ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$&lt;isize&gt; &gt;, ref$&lt;slice2$&lt;isize&gt; &gt;, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (13,528 samples, 59.15%)</title><rect x="40.6139%" y="213" width="59.1543%" height="15" fill="rgb(233,213,13)" fg:x="9288" fg:w="13528"/><text x="40.8639%" y="223.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::vertex::vertex&lt;6&gt;(unsigned long long, nalgebr..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::floor (6 samples, 0.03%)</title><rect x="99.7420%" y="197" width="0.0262%" height="15" fill="rgb(233,141,41)" fg:x="22810" fg:w="6"/><text x="99.9920%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min(core::slice::iter::Iter (13,547 samples, 59.24%)</title><rect x="40.5615%" y="357" width="59.2374%" height="15" fill="rgb(239,167,4)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="367.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min(core::slice::iter::Iter</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by(core::slice::iter::Iter&lt;usize&gt;, core::cmp::Ordering (*) (13,547 samples, 59.24%)</title><rect x="40.5615%" y="341" width="59.2374%" height="15" fill="rgb(209,217,16)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="351.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by(core::slice::iter::..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::reduce(core::slice::iter::Iter&lt;usize&gt;, core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (13,547 samples, 59.24%)</title><rect x="40.5615%" y="325" width="59.2374%" height="15" fill="rgb(219,88,35)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="335.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::reduce(core::slice::iter::..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;usize&gt;, unsigned long long*, core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (13,547 samples, 59.24%)</title><rect x="40.5615%" y="309" width="59.2374%" height="15" fill="rgb(220,193,23)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="319.50">benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;usize&gt;, ..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by::fold::closure$0(core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (13,547 samples, 59.24%)</title><rect x="40.5615%" y="293" width="59.2374%" height="15" fill="rgb(230,90,52)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="303.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by::fold::closure$0(co..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::min_by(unsigned long long*, unsigned long long*, core::cmp::Ordering (**) (13,547 samples, 59.24%)</title><rect x="40.5615%" y="277" width="59.2374%" height="15" fill="rgb(252,106,19)" fg:x="9276" fg:w="13547"/><text x="40.8115%" y="287.50">benchmarks-86e11159e9a0f911.exe`core::cmp::min_by(unsigned long long*, unsigned long long*, core::..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::impls::impl$4::call_once(core::cmp::Ordering (**) (13,543 samples, 59.22%)</title><rect x="40.5789%" y="261" width="59.2199%" height="15" fill="rgb(206,74,20)" fg:x="9280" fg:w="13543"/><text x="40.8289%" y="271.50">benchmarks-86e11159e9a0f911.exe`core::ops::function::impls::impl$4::call_once(core::cmp::Ordering ..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnMut::call_mut(core::cmp::Ordering (**) (13,543 samples, 59.22%)</title><rect x="40.5789%" y="245" width="59.2199%" height="15" fill="rgb(230,138,44)" fg:x="9280" fg:w="13543"/><text x="40.8289%" y="255.50">benchmarks-86e11159e9a0f911.exe`core::ops::function::FnMut::call_mut(core::cmp::Ordering (**)</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$11::cmp (13,543 samples, 59.22%)</title><rect x="40.5789%" y="229" width="59.2199%" height="15" fill="rgb(235,182,43)" fg:x="9280" fg:w="13543"/><text x="40.8289%" y="239.50">benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$11::cmp</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$59::cmp (7 samples, 0.03%)</title><rect x="99.7682%" y="213" width="0.0306%" height="15" fill="rgb(242,16,51)" fg:x="22816" fg:w="7"/><text x="100.0182%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (3 samples, 0.01%)</title><rect x="99.7989%" y="341" width="0.0131%" height="15" fill="rgb(248,9,4)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (3 samples, 0.01%)</title><rect x="99.7989%" y="325" width="0.0131%" height="15" fill="rgb(210,31,22)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="335.50"></text></g><g><title>`0x7FFEAD8806E0 (3 samples, 0.01%)</title><rect x="99.7989%" y="309" width="0.0131%" height="15" fill="rgb(239,54,39)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="319.50"></text></g><g><title>`0x7FFEAD81CCD8 (3 samples, 0.01%)</title><rect x="99.7989%" y="293" width="0.0131%" height="15" fill="rgb(230,99,41)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="303.50"></text></g><g><title>`0x7FFEAD872D2F (3 samples, 0.01%)</title><rect x="99.7989%" y="277" width="0.0131%" height="15" fill="rgb(253,106,12)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="287.50"></text></g><g><title>`0x7FFEAD962334 (3 samples, 0.01%)</title><rect x="99.7989%" y="261" width="0.0131%" height="15" fill="rgb(213,46,41)" fg:x="22823" fg:w="3"/><text x="100.0489%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (7 samples, 0.03%)</title><rect x="99.7989%" y="357" width="0.0306%" height="15" fill="rgb(215,133,35)" fg:x="22823" fg:w="7"/><text x="100.0489%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (4 samples, 0.02%)</title><rect x="99.8120%" y="341" width="0.0175%" height="15" fill="rgb(213,28,5)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (4 samples, 0.02%)</title><rect x="99.8120%" y="325" width="0.0175%" height="15" fill="rgb(215,77,49)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (4 samples, 0.02%)</title><rect x="99.8120%" y="309" width="0.0175%" height="15" fill="rgb(248,100,22)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="319.50"></text></g><g><title>`0x7FFEAD8806E0 (4 samples, 0.02%)</title><rect x="99.8120%" y="293" width="0.0175%" height="15" fill="rgb(208,67,9)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="303.50"></text></g><g><title>`0x7FFEAD81CCD8 (4 samples, 0.02%)</title><rect x="99.8120%" y="277" width="0.0175%" height="15" fill="rgb(219,133,21)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="287.50"></text></g><g><title>`0x7FFEAD872D2F (4 samples, 0.02%)</title><rect x="99.8120%" y="261" width="0.0175%" height="15" fill="rgb(246,46,29)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="271.50"></text></g><g><title>`0x7FFEAD962334 (4 samples, 0.02%)</title><rect x="99.8120%" y="245" width="0.0175%" height="15" fill="rgb(246,185,52)" fg:x="22826" fg:w="4"/><text x="100.0620%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function&lt;criterion::measurement::WallTime,benchmarks::bench_mcs::closure_env$0&gt;(ref$ (22,822 samples, 99.79%)</title><rect x="0.0394%" y="693" width="99.7945%" height="15" fill="rgb(252,136,11)" fg:x="9" fg:w="22822"/><text x="0.2894%" y="703.50">benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function&lt;criterion::measurement::WallTime,benchmarks::bench_mcs::closure_..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function (22,821 samples, 99.79%)</title><rect x="0.0437%" y="677" width="99.7901%" height="15" fill="rgb(219,138,53)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="687.50">benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::run_bench(criterion::benchmark_group::BenchmarkId, tuple$&lt;&gt;*, criterion::benchmark_group::impl$0::bench_function::closure_env$0 (22,821 samples, 99.79%)</title><rect x="0.0437%" y="661" width="99.7901%" height="15" fill="rgb(211,51,23)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="671.50">benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::run_bench(criterion::benchmark_group::BenchmarkId, tuple$..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::routine::Routine::test(criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;*, criterion::measurement::WallTime*, tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="645" width="99.7901%" height="15" fill="rgb(247,221,28)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="655.50">benchmarks-86e11159e9a0f911.exe`criterion::routine::Routine::test(criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::ben..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (22,821 samples, 99.79%)</title><rect x="0.0437%" y="629" width="99.7901%" height="15" fill="rgb(251,222,45)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="639.50">benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (22,821 samples, 99.79%)</title><rect x="0.0437%" y="613" width="99.7901%" height="15" fill="rgb(217,162,53)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="623.50">benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (22,821 samples, 99.79%)</title><rect x="0.0437%" y="597" width="99.7901%" height="15" fill="rgb(229,93,14)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="607.50">benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f64,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt; &gt;(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="581" width="99.7901%" height="15" fill="rgb(209,67,49)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="591.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f64,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="565" width="99.7901%" height="15" fill="rgb(213,87,29)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="575.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::im..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="549" width="99.7901%" height="15" fill="rgb(205,151,52)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="559.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::it..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="533" width="99.7901%" height="15" fill="rgb(253,215,39)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="543.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routin..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="517" width="99.7901%" height="15" fill="rgb(221,220,41)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="527.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="501" width="99.7901%" height="15" fill="rgb(218,133,21)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="511.50">benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;u64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="485" width="99.7901%" height="15" fill="rgb(221,193,43)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="495.50">benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;u64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt; &gt; &gt; &gt;*, tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="469" width="99.7901%" height="15" fill="rgb(240,128,52)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="479.50">benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::rou..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::routine::impl$1::bench::closure$0(criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (22,821 samples, 99.79%)</title><rect x="0.0437%" y="453" width="99.7901%" height="15" fill="rgb(253,114,12)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="463.50">benchmarks-86e11159e9a0f911.exe`criterion::routine::impl$1::bench::closure$0(criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterio..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::assert_iterated (22,821 samples, 99.79%)</title><rect x="0.0437%" y="437" width="99.7901%" height="15" fill="rgb(215,223,47)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="447.50">benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::assert_iterated</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,usize,usize,Rust_MCS::ExitFlagEnum&gt;,benchmarks::bench_mcs::closure$0::closure_env$0&gt; (22,821 samples, 99.79%)</title><rect x="0.0437%" y="421" width="99.7901%" height="15" fill="rgb(248,225,23)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="431.50">benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$&lt;nalgebra::base::matrix::Mat..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::bench_mcs::closure$0::closure$0 (22,821 samples, 99.79%)</title><rect x="0.0437%" y="405" width="99.7901%" height="15" fill="rgb(250,108,0)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="415.50">benchmarks-86e11159e9a0f911.exe`benchmarks::bench_mcs::closure$0::closure$0</text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,usize,usize,Rust_MCS::ExitFlagEnum&gt;,alloc::string::String&gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec (22,821 samples, 99.79%)</title><rect x="0.0437%" y="389" width="99.7901%" height="15" fill="rgb(228,208,7)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="399.50">benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Co..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs&lt;1000,6&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, unsigned long long, unsigned long long, unsigned long long, double, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::array_storage::ArrayStorage (22,821 samples, 99.79%)</title><rect x="0.0437%" y="373" width="99.7901%" height="15" fill="rgb(244,45,10)" fg:x="10" fg:w="22821"/><text x="0.2937%" y="383.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs&lt;1000,6&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Cons..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::DEFAULT_PLOTTING_BACKEND::closure$0 (3 samples, 0.01%)</title><rect x="99.8426%" y="597" width="0.0131%" height="15" fill="rgb(207,125,25)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="607.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; &gt;::initialize&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*) (3 samples, 0.01%)</title><rect x="99.8426%" y="581" width="0.0131%" height="15" fill="rgb(210,195,18)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="591.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (3 samples, 0.01%)</title><rect x="99.8426%" y="565" width="0.0131%" height="15" fill="rgb(249,80,12)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="575.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$ (3 samples, 0.01%)</title><rect x="99.8426%" y="549" width="0.0131%" height="15" fill="rgb(221,65,9)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="559.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion_plot::version (3 samples, 0.01%)</title><rect x="99.8426%" y="533" width="0.0131%" height="15" fill="rgb(235,49,36)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="543.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;, enum2$&lt;criterion_plot::VersionError&gt; (*) (3 samples, 0.01%)</title><rect x="99.8426%" y="517" width="0.0131%" height="15" fill="rgb(225,32,20)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="527.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::process::Command::output (3 samples, 0.01%)</title><rect x="99.8426%" y="501" width="0.0131%" height="15" fill="rgb(215,141,46)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="511.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::output (3 samples, 0.01%)</title><rect x="99.8426%" y="485" width="0.0131%" height="15" fill="rgb(250,160,47)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="495.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn (3 samples, 0.01%)</title><rect x="99.8426%" y="469" width="0.0131%" height="15" fill="rgb(216,222,40)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="479.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn_with_attributes (3 samples, 0.01%)</title><rect x="99.8426%" y="453" width="0.0131%" height="15" fill="rgb(234,217,39)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="463.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::resolve_exe (3 samples, 0.01%)</title><rect x="99.8426%" y="437" width="0.0131%" height="15" fill="rgb(207,178,40)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="447.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::search_paths (3 samples, 0.01%)</title><rect x="99.8426%" y="421" width="0.0131%" height="15" fill="rgb(221,136,13)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="431.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::resolve_exe::closure$0 (3 samples, 0.01%)</title><rect x="99.8426%" y="405" width="0.0131%" height="15" fill="rgb(249,199,10)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="415.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place (3 samples, 0.01%)</title><rect x="99.8426%" y="389" width="0.0131%" height="15" fill="rgb(249,222,13)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="399.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place (3 samples, 0.01%)</title><rect x="99.8426%" y="373" width="0.0131%" height="15" fill="rgb(244,185,38)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="383.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::program_exists (3 samples, 0.01%)</title><rect x="99.8426%" y="357" width="0.0131%" height="15" fill="rgb(236,202,9)" fg:x="22833" fg:w="3"/><text x="100.0926%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;criterion::PlottingBackend&gt;::initialize&lt;criterion::PlottingBackend,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;criterion::PlottingBackend,once_cell::sync::impl$11::force::closure_env$0&lt;criterion::PlottingBackend,criterion::PlottingBackend (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;criterion::PlottingBackend,once_cell::sync::impl$11::force::closure_env$0&lt;criterion::PlottingBackend,criterion::PlottingBackend (*) (5 samples, 0.02%)</title><rect x="99.8382%" y="661" width="0.0219%" height="15" fill="rgb(250,229,37)" fg:x="22832" fg:w="5"/><text x="100.0882%" y="671.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (5 samples, 0.02%)</title><rect x="99.8382%" y="645" width="0.0219%" height="15" fill="rgb(206,174,23)" fg:x="22832" fg:w="5"/><text x="100.0882%" y="655.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;bool,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;bool,once_cell::sync::impl$11::force::closure_env$0&lt;bool,bool (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;bool,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;bool,once_cell::sync::impl$11::force::closure_env$0&lt;bool,bool (*)()&gt; &gt;,enum2$ (5 samples, 0.02%)</title><rect x="99.8382%" y="629" width="0.0219%" height="15" fill="rgb(211,33,43)" fg:x="22832" fg:w="5"/><text x="100.0882%" y="639.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnOnce::call_once&lt;criterion::DEFAULT_PLOTTING_BACKEND::closure_env$0,tuple$&lt;&gt; &gt; (5 samples, 0.02%)</title><rect x="99.8382%" y="613" width="0.0219%" height="15" fill="rgb(245,58,50)" fg:x="22832" fg:w="5"/><text x="100.0882%" y="623.50"></text></g><g><title>`0x7FFEAB24D01A (3 samples, 0.01%)</title><rect x="99.8863%" y="277" width="0.0131%" height="15" fill="rgb(244,68,36)" fg:x="22843" fg:w="3"/><text x="100.1363%" y="287.50"></text></g><g><title>`0x7FFEAD963984 (3 samples, 0.01%)</title><rect x="99.8863%" y="261" width="0.0131%" height="15" fill="rgb(232,229,15)" fg:x="22843" fg:w="3"/><text x="100.1363%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn (9 samples, 0.04%)</title><rect x="99.8732%" y="373" width="0.0394%" height="15" fill="rgb(254,30,23)" fg:x="22840" fg:w="9"/><text x="100.1232%" y="383.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn_with_attributes (9 samples, 0.04%)</title><rect x="99.8732%" y="357" width="0.0394%" height="15" fill="rgb(235,160,14)" fg:x="22840" fg:w="9"/><text x="100.1232%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::cvt (8 samples, 0.03%)</title><rect x="99.8776%" y="341" width="0.0350%" height="15" fill="rgb(212,155,44)" fg:x="22841" fg:w="8"/><text x="100.1276%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::impl$3::is_zero (8 samples, 0.03%)</title><rect x="99.8776%" y="325" width="0.0350%" height="15" fill="rgb(226,2,50)" fg:x="22841" fg:w="8"/><text x="100.1276%" y="335.50"></text></g><g><title>`0x7FFEAC4AC6D4 (8 samples, 0.03%)</title><rect x="99.8776%" y="309" width="0.0350%" height="15" fill="rgb(234,177,6)" fg:x="22841" fg:w="8"/><text x="100.1276%" y="319.50"></text></g><g><title>`0x7FFEAB24A756 (8 samples, 0.03%)</title><rect x="99.8776%" y="293" width="0.0350%" height="15" fill="rgb(217,24,9)" fg:x="22841" fg:w="8"/><text x="100.1276%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::benches (22,843 samples, 99.89%)</title><rect x="0.0350%" y="709" width="99.8863%" height="15" fill="rgb(220,13,46)" fg:x="8" fg:w="22843"/><text x="0.2850%" y="719.50">benchmarks-86e11159e9a0f911.exe`benchmarks::benches</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::sample_size(criterion::Criterion (20 samples, 0.09%)</title><rect x="99.8338%" y="693" width="0.0875%" height="15" fill="rgb(239,221,27)" fg:x="22831" fg:w="20"/><text x="100.0838%" y="703.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::impl$4::default (20 samples, 0.09%)</title><rect x="99.8338%" y="677" width="0.0875%" height="15" fill="rgb(222,198,25)" fg:x="22831" fg:w="20"/><text x="100.0838%" y="687.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::sync::impl$12::deref(once_cell::sync::Lazy&lt;std::path::PathBuf,std::path::PathBuf (*) (14 samples, 0.06%)</title><rect x="99.8601%" y="661" width="0.0612%" height="15" fill="rgb(211,99,13)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="671.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::ffi::os_str::impl$10::clone (14 samples, 0.06%)</title><rect x="99.8601%" y="645" width="0.0612%" height="15" fill="rgb(232,111,31)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="655.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::os_str::wtf8::impl$10::clone (14 samples, 0.06%)</title><rect x="99.8601%" y="629" width="0.0612%" height="15" fill="rgb(245,82,37)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="639.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys_common::wtf8::impl$35::clone (14 samples, 0.06%)</title><rect x="99.8601%" y="613" width="0.0612%" height="15" fill="rgb(227,149,46)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="623.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (14 samples, 0.06%)</title><rect x="99.8601%" y="597" width="0.0612%" height="15" fill="rgb(218,36,50)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="607.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (14 samples, 0.06%)</title><rect x="99.8601%" y="581" width="0.0612%" height="15" fill="rgb(226,80,48)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="591.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_slice (14 samples, 0.06%)</title><rect x="99.8601%" y="565" width="0.0612%" height="15" fill="rgb(238,224,15)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="575.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;std::path::PathBuf&gt;::initialize&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*) (14 samples, 0.06%)</title><rect x="99.8601%" y="549" width="0.0612%" height="15" fill="rgb(241,136,10)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="559.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (14 samples, 0.06%)</title><rect x="99.8601%" y="533" width="0.0612%" height="15" fill="rgb(208,32,45)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="543.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$ (14 samples, 0.06%)</title><rect x="99.8601%" y="517" width="0.0612%" height="15" fill="rgb(207,135,9)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="527.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnOnce::call_once&lt;criterion::DEFAULT_OUTPUT_DIRECTORY::closure_env$0,tuple$&lt;&gt; &gt; (14 samples, 0.06%)</title><rect x="99.8601%" y="501" width="0.0612%" height="15" fill="rgb(206,86,44)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="511.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::DEFAULT_OUTPUT_DIRECTORY::closure$0 (14 samples, 0.06%)</title><rect x="99.8601%" y="485" width="0.0612%" height="15" fill="rgb(245,177,15)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="495.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::cargo_target_directory (14 samples, 0.06%)</title><rect x="99.8601%" y="469" width="0.0612%" height="15" fill="rgb(206,64,50)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="479.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::option::Option&lt;std::path::PathBuf&gt; &gt;::or_else(enum2$&lt;core::option::Option (14 samples, 0.06%)</title><rect x="99.8601%" y="453" width="0.0612%" height="15" fill="rgb(234,36,40)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="463.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::cargo_target_directory::closure$0 (14 samples, 0.06%)</title><rect x="99.8601%" y="437" width="0.0612%" height="15" fill="rgb(213,64,8)" fg:x="22837" fg:w="14"/><text x="100.1101%" y="447.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;::ok(enum2$&lt;core::result::Result (12 samples, 0.05%)</title><rect x="99.8688%" y="421" width="0.0525%" height="15" fill="rgb(210,75,36)" fg:x="22839" fg:w="12"/><text x="100.1188%" y="431.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::process::Command::output (12 samples, 0.05%)</title><rect x="99.8688%" y="405" width="0.0525%" height="15" fill="rgb(229,88,21)" fg:x="22839" fg:w="12"/><text x="100.1188%" y="415.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::output (11 samples, 0.05%)</title><rect x="99.8732%" y="389" width="0.0481%" height="15" fill="rgb(252,204,47)" fg:x="22840" fg:w="11"/><text x="100.1232%" y="399.50"></text></g><g><title>`0x7FFEAD89C5DC (22,851 samples, 99.92%)</title><rect x="0.0087%" y="917" width="99.9213%" height="15" fill="rgb(208,77,27)" fg:x="2" fg:w="22851"/><text x="0.2587%" y="927.50">`0x7FFEAD89C5DC</text></g><g><title>`0x7FFEAC49E8D7 (22,851 samples, 99.92%)</title><rect x="0.0087%" y="901" width="99.9213%" height="15" fill="rgb(221,76,26)" fg:x="2" fg:w="22851"/><text x="0.2587%" y="911.50">`0x7FFEAC49E8D7</text></g><g><title>benchmarks-86e11159e9a0f911.exe`__scrt_common_main_seh() (22,850 samples, 99.92%)</title><rect x="0.0131%" y="885" width="99.9169%" height="15" fill="rgb(225,139,18)" fg:x="3" fg:w="22850"/><text x="0.2631%" y="895.50">benchmarks-86e11159e9a0f911.exe`__scrt_common_main_seh()</text></g><g><title>benchmarks-86e11159e9a0f911.exe`invoke_main() (22,845 samples, 99.90%)</title><rect x="0.0350%" y="869" width="99.8951%" height="15" fill="rgb(230,137,11)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="879.50">benchmarks-86e11159e9a0f911.exe`invoke_main()</text></g><g><title>benchmarks-86e11159e9a0f911.exe`main (22,845 samples, 99.90%)</title><rect x="0.0350%" y="853" width="99.8951%" height="15" fill="rgb(212,28,1)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="863.50">benchmarks-86e11159e9a0f911.exe`main</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal (22,845 samples, 99.90%)</title><rect x="0.0350%" y="837" width="99.8951%" height="15" fill="rgb(248,164,17)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="847.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panic::catch_unwind (22,845 samples, 99.90%)</title><rect x="0.0350%" y="821" width="99.8951%" height="15" fill="rgb(222,171,42)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="831.50">benchmarks-86e11159e9a0f911.exe`std::panic::catch_unwind</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panicking::try (22,845 samples, 99.90%)</title><rect x="0.0350%" y="805" width="99.8951%" height="15" fill="rgb(243,84,45)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="815.50">benchmarks-86e11159e9a0f911.exe`std::panicking::try</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panicking::try::do_call (22,845 samples, 99.90%)</title><rect x="0.0350%" y="789" width="99.8951%" height="15" fill="rgb(252,49,23)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="799.50">benchmarks-86e11159e9a0f911.exe`std::panicking::try::do_call</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal::closure$0 (22,845 samples, 99.90%)</title><rect x="0.0350%" y="773" width="99.8951%" height="15" fill="rgb(215,19,7)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="783.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (22,845 samples, 99.90%)</title><rect x="0.0350%" y="757" width="99.8951%" height="15" fill="rgb(238,81,41)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="767.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (22,845 samples, 99.90%)</title><rect x="0.0350%" y="741" width="99.8951%" height="15" fill="rgb(210,199,37)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="751.50">benchmarks-86e11159e9a0f911.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::main (22,845 samples, 99.90%)</title><rect x="0.0350%" y="725" width="99.8951%" height="15" fill="rgb(244,192,49)" fg:x="8" fg:w="22845"/><text x="0.2850%" y="735.50">benchmarks-86e11159e9a0f911.exe`benchmarks::main</text></g><g><title>`0x7FFEAD80FE32 (3 samples, 0.01%)</title><rect x="99.9388%" y="805" width="0.0131%" height="15" fill="rgb(226,211,11)" fg:x="22855" fg:w="3"/><text x="100.1888%" y="815.50"></text></g><g><title>`0x7FFEAD8149A5 (3 samples, 0.01%)</title><rect x="99.9388%" y="789" width="0.0131%" height="15" fill="rgb(236,162,54)" fg:x="22855" fg:w="3"/><text x="100.1888%" y="799.50"></text></g><g><title>`0x7FFEAD8387A1 (3 samples, 0.01%)</title><rect x="99.9388%" y="773" width="0.0131%" height="15" fill="rgb(220,229,9)" fg:x="22855" fg:w="3"/><text x="100.1888%" y="783.50"></text></g><g><title>`0x7FFEAD8D8984 (5 samples, 0.02%)</title><rect x="99.9388%" y="853" width="0.0219%" height="15" fill="rgb(250,87,22)" fg:x="22855" fg:w="5"/><text x="100.1888%" y="863.50"></text></g><g><title>`0x7FFEAD854560 (5 samples, 0.02%)</title><rect x="99.9388%" y="837" width="0.0219%" height="15" fill="rgb(239,43,17)" fg:x="22855" fg:w="5"/><text x="100.1888%" y="847.50"></text></g><g><title>`0x7FFEAD80FAD0 (5 samples, 0.02%)</title><rect x="99.9388%" y="821" width="0.0219%" height="15" fill="rgb(231,177,25)" fg:x="22855" fg:w="5"/><text x="100.1888%" y="831.50"></text></g><g><title>`0x7FFEAD86BA79 (6 samples, 0.03%)</title><rect x="99.9388%" y="869" width="0.0262%" height="15" fill="rgb(219,179,1)" fg:x="22855" fg:w="6"/><text x="100.1888%" y="879.50"></text></g><g><title>all (22,869 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="22869"/><text x="0.2500%" y="943.50"></text></g><g><title>`0x7FFEAD8F270E (16 samples, 0.07%)</title><rect x="99.9300%" y="917" width="0.0700%" height="15" fill="rgb(232,167,36)" fg:x="22853" fg:w="16"/><text x="100.1800%" y="927.50"></text></g><g><title>`0x7FFEAD86AA22 (16 samples, 0.07%)</title><rect x="99.9300%" y="901" width="0.0700%" height="15" fill="rgb(244,19,51)" fg:x="22853" fg:w="16"/><text x="100.1800%" y="911.50"></text></g><g><title>`0x7FFEAD86AC38 (16 samples, 0.07%)</title><rect x="99.9300%" y="885" width="0.0700%" height="15" fill="rgb(224,6,22)" fg:x="22853" fg:w="16"/><text x="100.1800%" y="895.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="25896"><g><title>`0x7FFE462D5CB1 (4 samples, 0.02%)</title><rect x="0.0039%" y="885" width="0.0154%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="4"/><text x="0.2539%" y="895.50"></text></g><g><title>`0x7FFE462D4257 (3 samples, 0.01%)</title><rect x="0.0077%" y="869" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.2577%" y="879.50"></text></g><g><title>`0x7FFE46316020 (3 samples, 0.01%)</title><rect x="0.0193%" y="757" width="0.0116%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="3"/><text x="0.2693%" y="767.50"></text></g><g><title>`0x7FFE4630BCF4 (3 samples, 0.01%)</title><rect x="0.0193%" y="741" width="0.0116%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="3"/><text x="0.2693%" y="751.50"></text></g><g><title>`0x7FFE43970046 (4 samples, 0.02%)</title><rect x="0.0193%" y="869" width="0.0154%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="4"/><text x="0.2693%" y="879.50"></text></g><g><title>`0x7FFE4395553D (4 samples, 0.02%)</title><rect x="0.0193%" y="853" width="0.0154%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="4"/><text x="0.2693%" y="863.50"></text></g><g><title>`0x7FFE438E423B (4 samples, 0.02%)</title><rect x="0.0193%" y="837" width="0.0154%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="4"/><text x="0.2693%" y="847.50"></text></g><g><title>`0x7FFE43946225 (4 samples, 0.02%)</title><rect x="0.0193%" y="821" width="0.0154%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="4"/><text x="0.2693%" y="831.50"></text></g><g><title>`0x7FFE43AC2446 (4 samples, 0.02%)</title><rect x="0.0193%" y="805" width="0.0154%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="4"/><text x="0.2693%" y="815.50"></text></g><g><title>`0x7FFE462D9B30 (4 samples, 0.02%)</title><rect x="0.0193%" y="789" width="0.0154%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="4"/><text x="0.2693%" y="799.50"></text></g><g><title>`0x7FFE46315CA0 (4 samples, 0.02%)</title><rect x="0.0193%" y="773" width="0.0154%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="4"/><text x="0.2693%" y="783.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::polint::polint (7 samples, 0.03%)</title><rect x="0.4171%" y="341" width="0.0270%" height="15" fill="rgb(240,193,28)" fg:x="108" fg:w="7"/><text x="0.6671%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadpol (59 samples, 0.23%)</title><rect x="0.4441%" y="341" width="0.2278%" height="15" fill="rgb(216,20,37)" fg:x="115" fg:w="59"/><text x="0.6941%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadmin (47 samples, 0.18%)</title><rect x="0.4904%" y="325" width="0.1815%" height="15" fill="rgb(206,188,39)" fg:x="127" fg:w="47"/><text x="0.7404%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::quadratic_func::quadpol (35 samples, 0.14%)</title><rect x="0.5368%" y="309" width="0.1352%" height="15" fill="rgb(217,207,13)" fg:x="139" fg:w="35"/><text x="0.7868%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::exgain::exgain(unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double[6]*, double[6]*, double[6]*, double, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (84 samples, 0.32%)</title><rect x="0.3591%" y="357" width="0.3244%" height="15" fill="rgb(231,73,38)" fg:x="93" fg:w="84"/><text x="0.6091%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::default_allocator::impl$9::reallocate_copy(nalgebra::base::dimension::Const&lt;3&gt;, nalgebra::base::dimension::Dyn, nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (3 samples, 0.01%)</title><rect x="0.6989%" y="293" width="0.0116%" height="15" fill="rgb(225,20,46)" fg:x="181" fg:w="3"/><text x="0.9489%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt;::resize(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (3 samples, 0.01%)</title><rect x="0.6989%" y="277" width="0.0116%" height="15" fill="rgb(210,31,41)" fg:x="181" fg:w="3"/><text x="0.9489%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::reserve_exact (3 samples, 0.01%)</title><rect x="0.6989%" y="261" width="0.0116%" height="15" fill="rgb(221,200,47)" fg:x="181" fg:w="3"/><text x="0.9489%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_exact (3 samples, 0.01%)</title><rect x="0.6989%" y="245" width="0.0116%" height="15" fill="rgb(226,26,5)" fg:x="181" fg:w="3"/><text x="0.9489%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve_exact (3 samples, 0.01%)</title><rect x="0.6989%" y="229" width="0.0116%" height="15" fill="rgb(249,33,26)" fg:x="181" fg:w="3"/><text x="0.9489%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_reserve_exact (3 samples, 0.01%)</title><rect x="0.6989%" y="213" width="0.0116%" height="15" fill="rgb(235,183,28)" fg:x="181" fg:w="3"/><text x="0.9489%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_exact (3 samples, 0.01%)</title><rect x="0.6989%" y="197" width="0.0116%" height="15" fill="rgb(221,5,38)" fg:x="181" fg:w="3"/><text x="0.9489%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3 samples, 0.01%)</title><rect x="0.6989%" y="181" width="0.0116%" height="15" fill="rgb(247,18,42)" fg:x="181" fg:w="3"/><text x="0.9489%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.6989%" y="165" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="181" fg:w="3"/><text x="0.9489%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.6989%" y="149" width="0.0116%" height="15" fill="rgb(249,31,29)" fg:x="181" fg:w="3"/><text x="0.9489%" y="159.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.6989%" y="133" width="0.0116%" height="15" fill="rgb(225,111,53)" fg:x="181" fg:w="3"/><text x="0.9489%" y="143.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="0.6989%" y="117" width="0.0116%" height="15" fill="rgb(238,160,17)" fg:x="181" fg:w="3"/><text x="0.9489%" y="127.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_horizontally(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (4 samples, 0.02%)</title><rect x="0.6989%" y="325" width="0.0154%" height="15" fill="rgb(214,148,48)" fg:x="181" fg:w="4"/><text x="0.9489%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_generic(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;, nalgebra::base::dimension::Const (4 samples, 0.02%)</title><rect x="0.6989%" y="309" width="0.0154%" height="15" fill="rgb(232,36,49)" fg:x="181" fg:w="4"/><text x="0.9489%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;::resize_horizontally_mut&lt;f64,nalgebra::base::dimension::Const&lt;3&gt; &gt; (13 samples, 0.05%)</title><rect x="0.6874%" y="341" width="0.0502%" height="15" fill="rgb(209,103,24)" fg:x="178" fg:w="13"/><text x="0.9374%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$42::clone(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (6 samples, 0.02%)</title><rect x="0.7144%" y="325" width="0.0232%" height="15" fill="rgb(229,88,8)" fg:x="185" fg:w="6"/><text x="0.9644%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::vec_storage::impl$23::clone(nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (6 samples, 0.02%)</title><rect x="0.7144%" y="309" width="0.0232%" height="15" fill="rgb(213,181,19)" fg:x="185" fg:w="6"/><text x="0.9644%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::splinit::splinit(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), unsigned long long, unsigned long long, unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double*, enum2$&lt;core::option::Option&lt;usize&gt; &gt;[1000]*, unsigned long long*, unsigned long long*, unsigned long long*, unsigned long long*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const (14 samples, 0.05%)</title><rect x="0.6874%" y="357" width="0.0541%" height="15" fill="rgb(254,191,54)" fg:x="178" fg:w="14"/><text x="0.9374%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtrec::updtrec(unsigned long long, unsigned long long, ref$&lt;slice2$&lt;f64&gt; &gt;, enum2$&lt;core::option::Option (38 samples, 0.15%)</title><rect x="0.8689%" y="325" width="0.1467%" height="15" fill="rgb(241,83,37)" fg:x="225" fg:w="38"/><text x="1.1189%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::resize (3 samples, 0.01%)</title><rect x="1.0156%" y="325" width="0.0116%" height="15" fill="rgb(233,36,39)" fg:x="263" fg:w="3"/><text x="1.2656%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::extend_with (3 samples, 0.01%)</title><rect x="1.0156%" y="309" width="0.0116%" height="15" fill="rgb(226,3,54)" fg:x="263" fg:w="3"/><text x="1.2656%" y="319.50"></text></g><g><title>`0x7FFE464218D3 (26 samples, 0.10%)</title><rect x="1.0310%" y="85" width="0.1004%" height="15" fill="rgb(245,192,40)" fg:x="267" fg:w="26"/><text x="1.2810%" y="95.50"></text></g><g><title>`0x7FFE464218D7 (7 samples, 0.03%)</title><rect x="1.1314%" y="85" width="0.0270%" height="15" fill="rgb(238,167,29)" fg:x="293" fg:w="7"/><text x="1.3814%" y="95.50"></text></g><g><title>`0x7FFE462F1D19 (36 samples, 0.14%)</title><rect x="1.0272%" y="101" width="0.1390%" height="15" fill="rgb(232,182,51)" fg:x="266" fg:w="36"/><text x="1.2772%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::reserve (41 samples, 0.16%)</title><rect x="1.0272%" y="293" width="0.1583%" height="15" fill="rgb(231,60,39)" fg:x="266" fg:w="41"/><text x="1.2772%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::reserve (41 samples, 0.16%)</title><rect x="1.0272%" y="277" width="0.1583%" height="15" fill="rgb(208,69,12)" fg:x="266" fg:w="41"/><text x="1.2772%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (41 samples, 0.16%)</title><rect x="1.0272%" y="261" width="0.1583%" height="15" fill="rgb(235,93,37)" fg:x="266" fg:w="41"/><text x="1.2772%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (41 samples, 0.16%)</title><rect x="1.0272%" y="245" width="0.1583%" height="15" fill="rgb(213,116,39)" fg:x="266" fg:w="41"/><text x="1.2772%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (41 samples, 0.16%)</title><rect x="1.0272%" y="229" width="0.1583%" height="15" fill="rgb(222,207,29)" fg:x="266" fg:w="41"/><text x="1.2772%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (41 samples, 0.16%)</title><rect x="1.0272%" y="213" width="0.1583%" height="15" fill="rgb(206,96,30)" fg:x="266" fg:w="41"/><text x="1.2772%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (41 samples, 0.16%)</title><rect x="1.0272%" y="197" width="0.1583%" height="15" fill="rgb(218,138,4)" fg:x="266" fg:w="41"/><text x="1.2772%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (41 samples, 0.16%)</title><rect x="1.0272%" y="181" width="0.1583%" height="15" fill="rgb(250,191,14)" fg:x="266" fg:w="41"/><text x="1.2772%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (41 samples, 0.16%)</title><rect x="1.0272%" y="165" width="0.1583%" height="15" fill="rgb(239,60,40)" fg:x="266" fg:w="41"/><text x="1.2772%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (41 samples, 0.16%)</title><rect x="1.0272%" y="149" width="0.1583%" height="15" fill="rgb(206,27,48)" fg:x="266" fg:w="41"/><text x="1.2772%" y="159.50"></text></g><g><title>`0x7FFE46364B8C (41 samples, 0.16%)</title><rect x="1.0272%" y="133" width="0.1583%" height="15" fill="rgb(225,35,8)" fg:x="266" fg:w="41"/><text x="1.2772%" y="143.50"></text></g><g><title>`0x7FFE462F0DC5 (41 samples, 0.16%)</title><rect x="1.0272%" y="117" width="0.1583%" height="15" fill="rgb(250,213,24)" fg:x="266" fg:w="41"/><text x="1.2772%" y="127.50"></text></g><g><title>`0x7FFE462F1D2C (5 samples, 0.02%)</title><rect x="1.1662%" y="101" width="0.0193%" height="15" fill="rgb(247,123,22)" fg:x="302" fg:w="5"/><text x="1.4162%" y="111.50"></text></g><g><title>`0x7FFE462EFA02 (5 samples, 0.02%)</title><rect x="1.1662%" y="85" width="0.0193%" height="15" fill="rgb(231,138,38)" fg:x="302" fg:w="5"/><text x="1.4162%" y="95.50"></text></g><g><title>`0x7FFE462CC2ED (4 samples, 0.02%)</title><rect x="1.1701%" y="69" width="0.0154%" height="15" fill="rgb(231,145,46)" fg:x="303" fg:w="4"/><text x="1.4201%" y="79.50"></text></g><g><title>`0x7FFE4632F5FF (4 samples, 0.02%)</title><rect x="1.1701%" y="53" width="0.0154%" height="15" fill="rgb(251,118,11)" fg:x="303" fg:w="4"/><text x="1.4201%" y="63.50"></text></g><g><title>`0x7FFE4641C384 (4 samples, 0.02%)</title><rect x="1.1701%" y="37" width="0.0154%" height="15" fill="rgb(217,147,25)" fg:x="303" fg:w="4"/><text x="1.4201%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::resize(unsigned long long, enum2$&lt;core::option::Option (73 samples, 0.28%)</title><rect x="1.0272%" y="325" width="0.2819%" height="15" fill="rgb(247,81,37)" fg:x="266" fg:w="73"/><text x="1.2772%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::extend_with(unsigned long long, enum2$&lt;core::option::Option (73 samples, 0.28%)</title><rect x="1.0272%" y="309" width="0.2819%" height="15" fill="rgb(209,12,38)" fg:x="266" fg:w="73"/><text x="1.2772%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write(enum2$&lt;core::option::Option&lt;usize&gt; &gt;*, enum2$&lt;core::option::Option (32 samples, 0.12%)</title><rect x="1.1855%" y="293" width="0.1236%" height="15" fill="rgb(227,1,9)" fg:x="307" fg:w="32"/><text x="1.4355%" y="303.50"></text></g><g><title>`0x7FFE464218D3 (37 samples, 0.14%)</title><rect x="1.3284%" y="85" width="0.1429%" height="15" fill="rgb(248,47,43)" fg:x="344" fg:w="37"/><text x="1.5784%" y="95.50"></text></g><g><title>`0x7FFE464218D7 (21 samples, 0.08%)</title><rect x="1.4713%" y="85" width="0.0811%" height="15" fill="rgb(221,10,30)" fg:x="381" fg:w="21"/><text x="1.7213%" y="95.50"></text></g><g><title>`0x7FFE464218EB (3 samples, 0.01%)</title><rect x="1.5639%" y="85" width="0.0116%" height="15" fill="rgb(210,229,1)" fg:x="405" fg:w="3"/><text x="1.8139%" y="95.50"></text></g><g><title>`0x7FFE462F1D19 (70 samples, 0.27%)</title><rect x="1.3168%" y="101" width="0.2703%" height="15" fill="rgb(222,148,37)" fg:x="341" fg:w="70"/><text x="1.5668%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::reserve (82 samples, 0.32%)</title><rect x="1.3129%" y="293" width="0.3167%" height="15" fill="rgb(234,67,33)" fg:x="340" fg:w="82"/><text x="1.5629%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve (82 samples, 0.32%)</title><rect x="1.3129%" y="277" width="0.3167%" height="15" fill="rgb(247,98,35)" fg:x="340" fg:w="82"/><text x="1.5629%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (82 samples, 0.32%)</title><rect x="1.3129%" y="261" width="0.3167%" height="15" fill="rgb(247,138,52)" fg:x="340" fg:w="82"/><text x="1.5629%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (82 samples, 0.32%)</title><rect x="1.3129%" y="245" width="0.3167%" height="15" fill="rgb(213,79,30)" fg:x="340" fg:w="82"/><text x="1.5629%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (82 samples, 0.32%)</title><rect x="1.3129%" y="229" width="0.3167%" height="15" fill="rgb(246,177,23)" fg:x="340" fg:w="82"/><text x="1.5629%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (82 samples, 0.32%)</title><rect x="1.3129%" y="213" width="0.3167%" height="15" fill="rgb(230,62,27)" fg:x="340" fg:w="82"/><text x="1.5629%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (82 samples, 0.32%)</title><rect x="1.3129%" y="197" width="0.3167%" height="15" fill="rgb(216,154,8)" fg:x="340" fg:w="82"/><text x="1.5629%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (82 samples, 0.32%)</title><rect x="1.3129%" y="181" width="0.3167%" height="15" fill="rgb(244,35,45)" fg:x="340" fg:w="82"/><text x="1.5629%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (82 samples, 0.32%)</title><rect x="1.3129%" y="165" width="0.3167%" height="15" fill="rgb(251,115,12)" fg:x="340" fg:w="82"/><text x="1.5629%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (82 samples, 0.32%)</title><rect x="1.3129%" y="149" width="0.3167%" height="15" fill="rgb(240,54,50)" fg:x="340" fg:w="82"/><text x="1.5629%" y="159.50"></text></g><g><title>`0x7FFE46364B8C (82 samples, 0.32%)</title><rect x="1.3129%" y="133" width="0.3167%" height="15" fill="rgb(233,84,52)" fg:x="340" fg:w="82"/><text x="1.5629%" y="143.50"></text></g><g><title>`0x7FFE462F0DC5 (82 samples, 0.32%)</title><rect x="1.3129%" y="117" width="0.3167%" height="15" fill="rgb(207,117,47)" fg:x="340" fg:w="82"/><text x="1.5629%" y="127.50"></text></g><g><title>`0x7FFE462F1D2C (11 samples, 0.04%)</title><rect x="1.5871%" y="101" width="0.0425%" height="15" fill="rgb(249,43,39)" fg:x="411" fg:w="11"/><text x="1.8371%" y="111.50"></text></g><g><title>`0x7FFE462EFA02 (11 samples, 0.04%)</title><rect x="1.5871%" y="85" width="0.0425%" height="15" fill="rgb(209,38,44)" fg:x="411" fg:w="11"/><text x="1.8371%" y="95.50"></text></g><g><title>`0x7FFE462CC2ED (8 samples, 0.03%)</title><rect x="1.5987%" y="69" width="0.0309%" height="15" fill="rgb(236,212,23)" fg:x="414" fg:w="8"/><text x="1.8487%" y="79.50"></text></g><g><title>`0x7FFE4632F5FF (8 samples, 0.03%)</title><rect x="1.5987%" y="53" width="0.0309%" height="15" fill="rgb(242,79,21)" fg:x="414" fg:w="8"/><text x="1.8487%" y="63.50"></text></g><g><title>`0x7FFE4641C384 (8 samples, 0.03%)</title><rect x="1.5987%" y="37" width="0.0309%" height="15" fill="rgb(211,96,35)" fg:x="414" fg:w="8"/><text x="1.8487%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::resize (161 samples, 0.62%)</title><rect x="1.3091%" y="325" width="0.6217%" height="15" fill="rgb(253,215,40)" fg:x="339" fg:w="161"/><text x="1.5591%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_with (160 samples, 0.62%)</title><rect x="1.3129%" y="309" width="0.6179%" height="15" fill="rgb(211,81,21)" fg:x="340" fg:w="160"/><text x="1.5629%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (78 samples, 0.30%)</title><rect x="1.6296%" y="293" width="0.3012%" height="15" fill="rgb(208,190,38)" fg:x="422" fg:w="78"/><text x="1.8796%" y="303.50"></text></g><g><title>`0x7FFE25041A89 (78 samples, 0.30%)</title><rect x="1.6296%" y="277" width="0.3012%" height="15" fill="rgb(235,213,38)" fg:x="422" fg:w="78"/><text x="1.8796%" y="287.50"></text></g><g><title>`0x7FFE464218D3 (16 samples, 0.06%)</title><rect x="1.9347%" y="85" width="0.0618%" height="15" fill="rgb(237,122,38)" fg:x="501" fg:w="16"/><text x="2.1847%" y="95.50"></text></g><g><title>`0x7FFE464218D7 (17 samples, 0.07%)</title><rect x="1.9964%" y="85" width="0.0656%" height="15" fill="rgb(244,218,35)" fg:x="517" fg:w="17"/><text x="2.2464%" y="95.50"></text></g><g><title>`0x7FFE462F1D19 (37 samples, 0.14%)</title><rect x="1.9308%" y="101" width="0.1429%" height="15" fill="rgb(240,68,47)" fg:x="500" fg:w="37"/><text x="2.1808%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::reserve (43 samples, 0.17%)</title><rect x="1.9308%" y="293" width="0.1660%" height="15" fill="rgb(210,16,53)" fg:x="500" fg:w="43"/><text x="2.1808%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;isize,alloc::alloc::Global&gt;::reserve (43 samples, 0.17%)</title><rect x="1.9308%" y="277" width="0.1660%" height="15" fill="rgb(235,124,12)" fg:x="500" fg:w="43"/><text x="2.1808%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (43 samples, 0.17%)</title><rect x="1.9308%" y="261" width="0.1660%" height="15" fill="rgb(224,169,11)" fg:x="500" fg:w="43"/><text x="2.1808%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (43 samples, 0.17%)</title><rect x="1.9308%" y="245" width="0.1660%" height="15" fill="rgb(250,166,2)" fg:x="500" fg:w="43"/><text x="2.1808%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (43 samples, 0.17%)</title><rect x="1.9308%" y="229" width="0.1660%" height="15" fill="rgb(242,216,29)" fg:x="500" fg:w="43"/><text x="2.1808%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (43 samples, 0.17%)</title><rect x="1.9308%" y="213" width="0.1660%" height="15" fill="rgb(230,116,27)" fg:x="500" fg:w="43"/><text x="2.1808%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (43 samples, 0.17%)</title><rect x="1.9308%" y="197" width="0.1660%" height="15" fill="rgb(228,99,48)" fg:x="500" fg:w="43"/><text x="2.1808%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (43 samples, 0.17%)</title><rect x="1.9308%" y="181" width="0.1660%" height="15" fill="rgb(253,11,6)" fg:x="500" fg:w="43"/><text x="2.1808%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (43 samples, 0.17%)</title><rect x="1.9308%" y="165" width="0.1660%" height="15" fill="rgb(247,143,39)" fg:x="500" fg:w="43"/><text x="2.1808%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (43 samples, 0.17%)</title><rect x="1.9308%" y="149" width="0.1660%" height="15" fill="rgb(236,97,10)" fg:x="500" fg:w="43"/><text x="2.1808%" y="159.50"></text></g><g><title>`0x7FFE46364B8C (43 samples, 0.17%)</title><rect x="1.9308%" y="133" width="0.1660%" height="15" fill="rgb(233,208,19)" fg:x="500" fg:w="43"/><text x="2.1808%" y="143.50"></text></g><g><title>`0x7FFE462F0DC5 (43 samples, 0.17%)</title><rect x="1.9308%" y="117" width="0.1660%" height="15" fill="rgb(216,164,2)" fg:x="500" fg:w="43"/><text x="2.1808%" y="127.50"></text></g><g><title>`0x7FFE462F1D2C (6 samples, 0.02%)</title><rect x="2.0737%" y="101" width="0.0232%" height="15" fill="rgb(220,129,5)" fg:x="537" fg:w="6"/><text x="2.3237%" y="111.50"></text></g><g><title>`0x7FFE462EFA02 (6 samples, 0.02%)</title><rect x="2.0737%" y="85" width="0.0232%" height="15" fill="rgb(242,17,10)" fg:x="537" fg:w="6"/><text x="2.3237%" y="95.50"></text></g><g><title>`0x7FFE462CC2ED (5 samples, 0.02%)</title><rect x="2.0775%" y="69" width="0.0193%" height="15" fill="rgb(242,107,0)" fg:x="538" fg:w="5"/><text x="2.3275%" y="79.50"></text></g><g><title>`0x7FFE4632F5FF (5 samples, 0.02%)</title><rect x="2.0775%" y="53" width="0.0193%" height="15" fill="rgb(251,28,31)" fg:x="538" fg:w="5"/><text x="2.3275%" y="63.50"></text></g><g><title>`0x7FFE4641C384 (5 samples, 0.02%)</title><rect x="2.0775%" y="37" width="0.0193%" height="15" fill="rgb(233,223,10)" fg:x="538" fg:w="5"/><text x="2.3275%" y="47.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::resize (80 samples, 0.31%)</title><rect x="1.9308%" y="325" width="0.3089%" height="15" fill="rgb(215,21,27)" fg:x="500" fg:w="80"/><text x="2.1808%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::extend_with (80 samples, 0.31%)</title><rect x="1.9308%" y="309" width="0.3089%" height="15" fill="rgb(232,23,21)" fg:x="500" fg:w="80"/><text x="2.1808%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (37 samples, 0.14%)</title><rect x="2.0968%" y="293" width="0.1429%" height="15" fill="rgb(244,5,23)" fg:x="543" fg:w="37"/><text x="2.3468%" y="303.50"></text></g><g><title>`0x7FFE25041A89 (37 samples, 0.14%)</title><rect x="2.0968%" y="277" width="0.1429%" height="15" fill="rgb(226,81,46)" fg:x="543" fg:w="37"/><text x="2.3468%" y="287.50"></text></g><g><title>`0x7FFE464218D3 (8 samples, 0.03%)</title><rect x="2.2397%" y="85" width="0.0309%" height="15" fill="rgb(247,70,30)" fg:x="580" fg:w="8"/><text x="2.4897%" y="95.50"></text></g><g><title>`0x7FFE464218D7 (6 samples, 0.02%)</title><rect x="2.2706%" y="85" width="0.0232%" height="15" fill="rgb(212,68,19)" fg:x="588" fg:w="6"/><text x="2.5206%" y="95.50"></text></g><g><title>`0x7FFE462F1D19 (15 samples, 0.06%)</title><rect x="2.2397%" y="101" width="0.0579%" height="15" fill="rgb(240,187,13)" fg:x="580" fg:w="15"/><text x="2.4897%" y="111.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::reserve (18 samples, 0.07%)</title><rect x="2.2397%" y="293" width="0.0695%" height="15" fill="rgb(223,113,26)" fg:x="580" fg:w="18"/><text x="2.4897%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve (18 samples, 0.07%)</title><rect x="2.2397%" y="277" width="0.0695%" height="15" fill="rgb(206,192,2)" fg:x="580" fg:w="18"/><text x="2.4897%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (18 samples, 0.07%)</title><rect x="2.2397%" y="261" width="0.0695%" height="15" fill="rgb(241,108,4)" fg:x="580" fg:w="18"/><text x="2.4897%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$4::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (18 samples, 0.07%)</title><rect x="2.2397%" y="245" width="0.0695%" height="15" fill="rgb(247,173,49)" fg:x="580" fg:w="18"/><text x="2.4897%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (18 samples, 0.07%)</title><rect x="2.2397%" y="229" width="0.0695%" height="15" fill="rgb(224,114,35)" fg:x="580" fg:w="18"/><text x="2.4897%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (18 samples, 0.07%)</title><rect x="2.2397%" y="213" width="0.0695%" height="15" fill="rgb(245,159,27)" fg:x="580" fg:w="18"/><text x="2.4897%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (18 samples, 0.07%)</title><rect x="2.2397%" y="197" width="0.0695%" height="15" fill="rgb(245,172,44)" fg:x="580" fg:w="18"/><text x="2.4897%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (18 samples, 0.07%)</title><rect x="2.2397%" y="181" width="0.0695%" height="15" fill="rgb(236,23,11)" fg:x="580" fg:w="18"/><text x="2.4897%" y="191.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (18 samples, 0.07%)</title><rect x="2.2397%" y="165" width="0.0695%" height="15" fill="rgb(205,117,38)" fg:x="580" fg:w="18"/><text x="2.4897%" y="175.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (18 samples, 0.07%)</title><rect x="2.2397%" y="149" width="0.0695%" height="15" fill="rgb(237,72,25)" fg:x="580" fg:w="18"/><text x="2.4897%" y="159.50"></text></g><g><title>`0x7FFE46364B8C (18 samples, 0.07%)</title><rect x="2.2397%" y="133" width="0.0695%" height="15" fill="rgb(244,70,9)" fg:x="580" fg:w="18"/><text x="2.4897%" y="143.50"></text></g><g><title>`0x7FFE462F0DC5 (18 samples, 0.07%)</title><rect x="2.2397%" y="117" width="0.0695%" height="15" fill="rgb(217,125,39)" fg:x="580" fg:w="18"/><text x="2.4897%" y="127.50"></text></g><g><title>`0x7FFE462F1D2C (3 samples, 0.01%)</title><rect x="2.2977%" y="101" width="0.0116%" height="15" fill="rgb(235,36,10)" fg:x="595" fg:w="3"/><text x="2.5477%" y="111.50"></text></g><g><title>`0x7FFE462EFA02 (3 samples, 0.01%)</title><rect x="2.2977%" y="85" width="0.0116%" height="15" fill="rgb(251,123,47)" fg:x="595" fg:w="3"/><text x="2.5477%" y="95.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::resize (38 samples, 0.15%)</title><rect x="2.2397%" y="325" width="0.1467%" height="15" fill="rgb(221,13,13)" fg:x="580" fg:w="38"/><text x="2.4897%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::extend_with (38 samples, 0.15%)</title><rect x="2.2397%" y="309" width="0.1467%" height="15" fill="rgb(238,131,9)" fg:x="580" fg:w="38"/><text x="2.4897%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::write (20 samples, 0.08%)</title><rect x="2.3092%" y="293" width="0.0772%" height="15" fill="rgb(211,50,8)" fg:x="598" fg:w="20"/><text x="2.5592%" y="303.50"></text></g><g><title>`0x7FFE25041A89 (20 samples, 0.08%)</title><rect x="2.3092%" y="277" width="0.0772%" height="15" fill="rgb(245,182,24)" fg:x="598" fg:w="20"/><text x="2.5592%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_mut_slice (3 samples, 0.01%)</title><rect x="2.3865%" y="293" width="0.0116%" height="15" fill="rgb(242,14,37)" fg:x="618" fg:w="3"/><text x="2.6365%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (4 samples, 0.02%)</title><rect x="2.3865%" y="325" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="618" fg:w="4"/><text x="2.6365%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (4 samples, 0.02%)</title><rect x="2.3865%" y="309" width="0.0154%" height="15" fill="rgb(213,55,15)" fg:x="618" fg:w="4"/><text x="2.6365%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::genbox::genbox&lt;1000&gt;(unsigned long long*, alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, unsigned long long, unsigned long long, long long, double, enum2$&lt;core::option::Option (414 samples, 1.60%)</title><rect x="0.8109%" y="341" width="1.5987%" height="15" fill="rgb(209,9,3)" fg:x="210" fg:w="414"/><text x="1.0609%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_slice (5 samples, 0.02%)</title><rect x="2.4096%" y="309" width="0.0193%" height="15" fill="rgb(230,59,30)" fg:x="624" fg:w="5"/><text x="2.6596%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::genbox::genbox&lt;1000&gt;(unsigned long long*, alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, unsigned long long, unsigned long long, long long, double, enum2$&lt;core::option::Option (5 samples, 0.02%)</title><rect x="2.4096%" y="293" width="0.0193%" height="15" fill="rgb(209,121,21)" fg:x="624" fg:w="5"/><text x="2.6596%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtrec::updtrec(unsigned long long, unsigned long long, ref$&lt;slice2$&lt;f64&gt; &gt;, enum2$&lt;core::option::Option (4 samples, 0.02%)</title><rect x="2.4135%" y="277" width="0.0154%" height="15" fill="rgb(220,109,13)" fg:x="625" fg:w="4"/><text x="2.6635%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (7 samples, 0.03%)</title><rect x="2.4096%" y="341" width="0.0270%" height="15" fill="rgb(232,18,1)" fg:x="624" fg:w="7"/><text x="2.6596%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (7 samples, 0.03%)</title><rect x="2.4096%" y="325" width="0.0270%" height="15" fill="rgb(215,41,42)" fg:x="624" fg:w="7"/><text x="2.6596%" y="335.50"></text></g><g><title>`0x7FFE439779F8 (3 samples, 0.01%)</title><rect x="3.1665%" y="277" width="0.0116%" height="15" fill="rgb(224,123,36)" fg:x="820" fg:w="3"/><text x="3.4165%" y="287.50"></text></g><g><title>`0x7FFE43977CA5 (5 samples, 0.02%)</title><rect x="3.1935%" y="277" width="0.0193%" height="15" fill="rgb(240,125,3)" fg:x="827" fg:w="5"/><text x="3.4435%" y="287.50"></text></g><g><title>`0x7FFE43977CB2 (3 samples, 0.01%)</title><rect x="3.2129%" y="277" width="0.0116%" height="15" fill="rgb(205,98,50)" fg:x="832" fg:w="3"/><text x="3.4629%" y="287.50"></text></g><g><title>`0x7FFE43977CBE (4 samples, 0.02%)</title><rect x="3.2244%" y="277" width="0.0154%" height="15" fill="rgb(205,185,37)" fg:x="835" fg:w="4"/><text x="3.4744%" y="287.50"></text></g><g><title>`0x7FFE43977CDB (4 samples, 0.02%)</title><rect x="3.2399%" y="277" width="0.0154%" height="15" fill="rgb(238,207,15)" fg:x="839" fg:w="4"/><text x="3.4899%" y="287.50"></text></g><g><title>`0x7FFE43977CE4 (4 samples, 0.02%)</title><rect x="3.2553%" y="277" width="0.0154%" height="15" fill="rgb(213,199,42)" fg:x="843" fg:w="4"/><text x="3.5053%" y="287.50"></text></g><g><title>`0x7FFE43977CED (7 samples, 0.03%)</title><rect x="3.2708%" y="277" width="0.0270%" height="15" fill="rgb(235,201,11)" fg:x="847" fg:w="7"/><text x="3.5208%" y="287.50"></text></g><g><title>`0x7FFE43977CF6 (8 samples, 0.03%)</title><rect x="3.2978%" y="277" width="0.0309%" height="15" fill="rgb(207,46,11)" fg:x="854" fg:w="8"/><text x="3.5478%" y="287.50"></text></g><g><title>`0x7FFE43977CFF (7 samples, 0.03%)</title><rect x="3.3287%" y="277" width="0.0270%" height="15" fill="rgb(241,35,35)" fg:x="862" fg:w="7"/><text x="3.5787%" y="287.50"></text></g><g><title>`0x7FFE43977D1F (5 samples, 0.02%)</title><rect x="3.3557%" y="277" width="0.0193%" height="15" fill="rgb(243,32,47)" fg:x="869" fg:w="5"/><text x="3.6057%" y="287.50"></text></g><g><title>`0x7FFE43977A09 (4 samples, 0.02%)</title><rect x="3.3905%" y="261" width="0.0154%" height="15" fill="rgb(247,202,23)" fg:x="878" fg:w="4"/><text x="3.6405%" y="271.50"></text></g><g><title>`0x7FFE43977C97 (3 samples, 0.01%)</title><rect x="3.4098%" y="261" width="0.0116%" height="15" fill="rgb(219,102,11)" fg:x="883" fg:w="3"/><text x="3.6598%" y="271.50"></text></g><g><title>`0x7FFE43977CBE (5 samples, 0.02%)</title><rect x="3.4214%" y="261" width="0.0193%" height="15" fill="rgb(243,110,44)" fg:x="886" fg:w="5"/><text x="3.6714%" y="271.50"></text></g><g><title>`0x7FFE43977D1F (8 samples, 0.03%)</title><rect x="3.4561%" y="261" width="0.0309%" height="15" fill="rgb(222,74,54)" fg:x="895" fg:w="8"/><text x="3.7061%" y="271.50"></text></g><g><title>`0x7FFE43977D2B (4 samples, 0.02%)</title><rect x="3.4947%" y="261" width="0.0154%" height="15" fill="rgb(216,99,12)" fg:x="905" fg:w="4"/><text x="3.7447%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::exp (44 samples, 0.17%)</title><rect x="3.3789%" y="277" width="0.1699%" height="15" fill="rgb(226,22,26)" fg:x="875" fg:w="44"/><text x="3.6289%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`exp (8 samples, 0.03%)</title><rect x="3.5179%" y="261" width="0.0309%" height="15" fill="rgb(217,163,10)" fg:x="911" fg:w="8"/><text x="3.7679%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (301 samples, 1.16%)</title><rect x="2.4367%" y="341" width="1.1623%" height="15" fill="rgb(213,25,53)" fg:x="631" fg:w="301"/><text x="2.6867%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (301 samples, 1.16%)</title><rect x="2.4367%" y="325" width="1.1623%" height="15" fill="rgb(252,105,26)" fg:x="631" fg:w="301"/><text x="2.6867%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_slice (301 samples, 1.16%)</title><rect x="2.4367%" y="309" width="1.1623%" height="15" fill="rgb(220,39,43)" fg:x="631" fg:w="301"/><text x="2.6867%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::hm6&lt;6&gt;(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (301 samples, 1.16%)</title><rect x="2.4367%" y="293" width="1.1623%" height="15" fill="rgb(229,68,48)" fg:x="631" fg:w="301"/><text x="2.6867%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::powi (13 samples, 0.05%)</title><rect x="3.5488%" y="277" width="0.0502%" height="15" fill="rgb(252,8,32)" fg:x="919" fg:w="13"/><text x="3.7988%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split&lt;6,1000&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), unsigned long long, unsigned long long, unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double[6]*, double, double, alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, double*, enum2$&lt;core::option::Option (746 samples, 2.88%)</title><rect x="0.7414%" y="357" width="2.8808%" height="15" fill="rgb(223,20,43)" fg:x="192" fg:w="746"/><text x="0.9914%" y="367.50">be..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$42::clone(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (6 samples, 0.02%)</title><rect x="3.5990%" y="341" width="0.0232%" height="15" fill="rgb(229,81,49)" fg:x="932" fg:w="6"/><text x="3.8490%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::splrnk::splrnk(unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;usize,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;usize,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (44 samples, 0.17%)</title><rect x="3.6222%" y="357" width="0.1699%" height="15" fill="rgb(236,28,36)" fg:x="938" fg:w="44"/><text x="3.8722%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split2 (22 samples, 0.08%)</title><rect x="3.7071%" y="341" width="0.0850%" height="15" fill="rgb(249,185,26)" fg:x="960" fg:w="22"/><text x="3.9571%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::Ord::min (976 samples, 3.77%)</title><rect x="33.7040%" y="341" width="3.7689%" height="15" fill="rgb(249,174,33)" fg:x="8728" fg:w="976"/><text x="33.9540%" y="351.50">benc..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::range::impl$6::next(core::ops::range::Range (724 samples, 2.80%)</title><rect x="37.4730%" y="341" width="2.7958%" height="15" fill="rgb(233,201,37)" fg:x="9704" fg:w="724"/><text x="37.7230%" y="351.50">be..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (724 samples, 2.80%)</title><rect x="37.4730%" y="325" width="2.7958%" height="15" fill="rgb(221,78,26)" fg:x="9704" fg:w="724"/><text x="37.7230%" y="335.50">be..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$58::lt (724 samples, 2.80%)</title><rect x="37.4730%" y="309" width="2.7958%" height="15" fill="rgb(250,127,30)" fg:x="9704" fg:w="724"/><text x="37.7230%" y="319.50">be..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::impl$0::fill(ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt; &gt; &gt;, enum2$&lt;core::option::Option (3 samples, 0.01%)</title><rect x="40.2688%" y="341" width="0.0116%" height="15" fill="rgb(230,49,44)" fg:x="10428" fg:w="3"/><text x="40.5188%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::specialize::impl$1::spec_fill(ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt; &gt; &gt;, enum2$&lt;core::option::Option (3 samples, 0.01%)</title><rect x="40.2688%" y="325" width="0.0116%" height="15" fill="rgb(229,67,23)" fg:x="10428" fg:w="3"/><text x="40.5188%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::strtsw::strtsw(enum2$&lt;core::option::Option&lt;usize&gt; &gt;[1000]*, ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (9,592 samples, 37.04%)</title><rect x="3.7921%" y="357" width="37.0405%" height="15" fill="rgb(249,83,47)" fg:x="982" fg:w="9592"/><text x="4.0421%" y="367.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::strtsw:..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_none (143 samples, 0.55%)</title><rect x="40.2804%" y="341" width="0.5522%" height="15" fill="rgb(215,43,3)" fg:x="10431" fg:w="143"/><text x="40.5304%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_some (143 samples, 0.55%)</title><rect x="40.2804%" y="325" width="0.5522%" height="15" fill="rgb(238,154,13)" fg:x="10431" fg:w="143"/><text x="40.5304%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtrec::updtrec(unsigned long long, unsigned long long, ref$&lt;slice2$&lt;f64&gt; &gt;, enum2$&lt;core::option::Option (15 samples, 0.06%)</title><rect x="40.8326%" y="357" width="0.0579%" height="15" fill="rgb(219,56,2)" fg:x="10574" fg:w="15"/><text x="41.0826%" y="367.50"></text></g><g><title>`0x7FFE43978106 (13 samples, 0.05%)</title><rect x="65.5622%" y="341" width="0.0502%" height="15" fill="rgb(233,0,4)" fg:x="16978" fg:w="13"/><text x="65.8122%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::split::split1 (71 samples, 0.27%)</title><rect x="65.6124%" y="341" width="0.2742%" height="15" fill="rgb(235,30,7)" fg:x="16991" fg:w="71"/><text x="65.8624%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::updtf::updtf (2,274 samples, 8.78%)</title><rect x="65.8866%" y="341" width="8.7813%" height="15" fill="rgb(250,79,13)" fg:x="17062" fg:w="2274"/><text x="66.1366%" y="351.50">benchmarks-8..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (3 samples, 0.01%)</title><rect x="78.0468%" y="325" width="0.0116%" height="15" fill="rgb(211,146,34)" fg:x="20211" fg:w="3"/><text x="78.2968%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (2,342 samples, 9.04%)</title><rect x="74.6679%" y="341" width="9.0439%" height="15" fill="rgb(228,22,38)" fg:x="19336" fg:w="2342"/><text x="74.9179%" y="351.50">benchmarks-86..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (1,464 samples, 5.65%)</title><rect x="78.0584%" y="325" width="5.6534%" height="15" fill="rgb(235,168,5)" fg:x="20214" fg:w="1464"/><text x="78.3084%" y="335.50">benchma..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (1,464 samples, 5.65%)</title><rect x="78.0584%" y="309" width="5.6534%" height="15" fill="rgb(221,155,16)" fg:x="20214" fg:w="1464"/><text x="78.3084%" y="319.50">benchma..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`ceil (8 samples, 0.03%)</title><rect x="83.7118%" y="341" width="0.0309%" height="15" fill="rgb(215,215,53)" fg:x="21678" fg:w="8"/><text x="83.9618%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::num::impl$5::abs (2,944 samples, 11.37%)</title><rect x="83.7427%" y="341" width="11.3686%" height="15" fill="rgb(223,4,10)" fg:x="21686" fg:w="2944"/><text x="83.9927%" y="351.50">benchmarks-86e111..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::num::impl$5::is_negative (3 samples, 0.01%)</title><rect x="95.0996%" y="325" width="0.0116%" height="15" fill="rgb(234,103,6)" fg:x="24627" fg:w="3"/><text x="95.3496%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::impl$0::fill(ref_mut$&lt;slice2$ (5 samples, 0.02%)</title><rect x="95.1112%" y="341" width="0.0193%" height="15" fill="rgb(227,97,0)" fg:x="24630" fg:w="5"/><text x="95.3612%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::specialize::impl$1::spec_fill(ref_mut$&lt;slice2$ (5 samples, 0.02%)</title><rect x="95.1112%" y="325" width="0.0193%" height="15" fill="rgb(234,150,53)" fg:x="24630" fg:w="5"/><text x="95.3612%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::unwrap(enum2$&lt;core::option::Option (1,053 samples, 4.07%)</title><rect x="95.1305%" y="341" width="4.0663%" height="15" fill="rgb(228,201,54)" fg:x="24635" fg:w="1053"/><text x="95.3805%" y="351.50">benc..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`floor (14 samples, 0.05%)</title><rect x="99.1968%" y="341" width="0.0541%" height="15" fill="rgb(222,22,37)" fg:x="25688" fg:w="14"/><text x="99.4468%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::ops::impl$1::index(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;*, tuple$ (7 samples, 0.03%)</title><rect x="99.2547%" y="341" width="0.0270%" height="15" fill="rgb(237,53,32)" fg:x="25703" fg:w="7"/><text x="99.5047%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::ops::impl$1::index(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, tuple$ (11 samples, 0.04%)</title><rect x="99.2817%" y="341" width="0.0425%" height="15" fill="rgb(233,25,53)" fg:x="25710" fg:w="11"/><text x="99.5317%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;::get_unchecked(tuple$ (8 samples, 0.03%)</title><rect x="99.2933%" y="325" width="0.0309%" height="15" fill="rgb(210,40,34)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::indexing::impl$11::get_unchecked(tuple$&lt;usize,usize&gt;, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage (8 samples, 0.03%)</title><rect x="99.2933%" y="309" width="0.0309%" height="15" fill="rgb(241,220,44)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_unchecked(nalgebra::base::array_storage::ArrayStorage (8 samples, 0.03%)</title><rect x="99.2933%" y="293" width="0.0309%" height="15" fill="rgb(235,28,35)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_unchecked_linear(nalgebra::base::array_storage::ArrayStorage (8 samples, 0.03%)</title><rect x="99.2933%" y="277" width="0.0309%" height="15" fill="rgb(210,56,17)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::storage::RawStorage::get_address_unchecked_linear(nalgebra::base::array_storage::ArrayStorage (8 samples, 0.03%)</title><rect x="99.2933%" y="261" width="0.0309%" height="15" fill="rgb(224,130,29)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::const_ptr::impl$0::wrapping_add (8 samples, 0.03%)</title><rect x="99.2933%" y="245" width="0.0309%" height="15" fill="rgb(235,212,8)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::const_ptr::impl$0::wrapping_offset (8 samples, 0.03%)</title><rect x="99.2933%" y="229" width="0.0309%" height="15" fill="rgb(223,33,50)" fg:x="25713" fg:w="8"/><text x="99.5433%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::f64::impl$0::ceil (12 samples, 0.05%)</title><rect x="99.3242%" y="341" width="0.0463%" height="15" fill="rgb(219,149,13)" fg:x="25721" fg:w="12"/><text x="99.5742%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::vertex::vertex(unsigned long long, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,3&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Const&lt;3&gt;,nalgebra::base::dimension::Dyn&gt; &gt;*, ref$&lt;slice2$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt; &gt; &gt;, ref$&lt;slice2$&lt;isize&gt; &gt;, ref$&lt;slice2$&lt;isize&gt; &gt;, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;[2]*, unsigned long long[6]*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (15,145 samples, 58.48%)</title><rect x="40.8905%" y="357" width="58.4839%" height="15" fill="rgb(250,156,29)" fg:x="10589" fg:w="15145"/><text x="41.1405%" y="367.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::vertex::vertex(unsigned long long, nalgebra:..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::from_elem (3 samples, 0.01%)</title><rect x="99.3860%" y="357" width="0.0116%" height="15" fill="rgb(216,193,19)" fg:x="25737" fg:w="3"/><text x="99.6360%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_elem::impl$1::from_elem (3 samples, 0.01%)</title><rect x="99.3860%" y="341" width="0.0116%" height="15" fill="rgb(216,135,14)" fg:x="25737" fg:w="3"/><text x="99.6360%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;bool,alloc::alloc::Global&gt;::as_slice (11 samples, 0.04%)</title><rect x="99.3976%" y="325" width="0.0425%" height="15" fill="rgb(241,47,5)" fg:x="25740" fg:w="11"/><text x="99.6476%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_slice (12 samples, 0.05%)</title><rect x="99.4401%" y="325" width="0.0463%" height="15" fill="rgb(233,42,35)" fg:x="25751" fg:w="12"/><text x="99.6901%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_slice (6 samples, 0.02%)</title><rect x="99.4864%" y="325" width="0.0232%" height="15" fill="rgb(231,13,6)" fg:x="25763" fg:w="6"/><text x="99.7364%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$13::index(alloc::vec::Vec (39 samples, 0.15%)</title><rect x="99.3976%" y="357" width="0.1506%" height="15" fill="rgb(207,181,40)" fg:x="25740" fg:w="39"/><text x="99.6476%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (39 samples, 0.15%)</title><rect x="99.3976%" y="341" width="0.1506%" height="15" fill="rgb(254,173,49)" fg:x="25740" fg:w="39"/><text x="99.6476%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (10 samples, 0.04%)</title><rect x="99.5096%" y="325" width="0.0386%" height="15" fill="rgb(221,1,38)" fg:x="25769" fg:w="10"/><text x="99.7596%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_slice (9 samples, 0.03%)</title><rect x="99.5521%" y="325" width="0.0348%" height="15" fill="rgb(206,124,46)" fg:x="25780" fg:w="9"/><text x="99.8021%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_mut_slice (4 samples, 0.02%)</title><rect x="99.5868%" y="325" width="0.0154%" height="15" fill="rgb(249,21,11)" fg:x="25789" fg:w="4"/><text x="99.8368%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (22 samples, 0.08%)</title><rect x="99.5482%" y="341" width="0.0850%" height="15" fill="rgb(222,201,40)" fg:x="25779" fg:w="22"/><text x="99.7982%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_slice (8 samples, 0.03%)</title><rect x="99.6023%" y="325" width="0.0309%" height="15" fill="rgb(235,61,29)" fg:x="25793" fg:w="8"/><text x="99.8523%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_ptr (6 samples, 0.02%)</title><rect x="99.6100%" y="309" width="0.0232%" height="15" fill="rgb(219,207,3)" fg:x="25795" fg:w="6"/><text x="99.8600%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (6 samples, 0.02%)</title><rect x="99.6100%" y="293" width="0.0232%" height="15" fill="rgb(222,56,46)" fg:x="25795" fg:w="6"/><text x="99.8600%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (6 samples, 0.02%)</title><rect x="99.6100%" y="277" width="0.0232%" height="15" fill="rgb(239,76,54)" fg:x="25795" fg:w="6"/><text x="99.8600%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (6 samples, 0.02%)</title><rect x="99.6100%" y="261" width="0.0232%" height="15" fill="rgb(231,124,27)" fg:x="25795" fg:w="6"/><text x="99.8600%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (23 samples, 0.09%)</title><rect x="99.5482%" y="357" width="0.0888%" height="15" fill="rgb(249,195,6)" fg:x="25779" fg:w="23"/><text x="99.7982%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (3 samples, 0.01%)</title><rect x="99.6409%" y="357" width="0.0116%" height="15" fill="rgb(237,174,47)" fg:x="25803" fg:w="3"/><text x="99.8909%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;isize,alloc::alloc::Global&gt;::as_slice (3 samples, 0.01%)</title><rect x="99.6409%" y="341" width="0.0116%" height="15" fill="rgb(206,201,31)" fg:x="25803" fg:w="3"/><text x="99.8909%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="357" width="0.0270%" height="15" fill="rgb(231,57,52)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, Rust_MCS::mcs_utils::chk_locks::chkloc::closure_env$0 (7 samples, 0.03%)</title><rect x="99.6525%" y="341" width="0.0270%" height="15" fill="rgb(248,177,22)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs_utils::chk_locks::chkloc::closure$0(Rust_MCS::mcs_utils::chk_locks::chkloc::closure_env$0&lt;6&gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="325" width="0.0270%" height="15" fill="rgb(215,211,37)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$9::eq(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;**, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="309" width="0.0270%" height="15" fill="rgb(241,128,51)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$31::eq(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="293" width="0.0270%" height="15" fill="rgb(227,165,31)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::all(core::iter::adapters::zip::Zip&lt;nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="277" width="0.0270%" height="15" fill="rgb(228,167,24)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::try_fold(core::iter::adapters::zip::Zip&lt;nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,nalgebra::base::iter::MatrixIter&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;f64&gt;,ref$&lt;f64&gt; &gt;,nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage (7 samples, 0.03%)</title><rect x="99.6525%" y="261" width="0.0270%" height="15" fill="rgb(228,143,12)" fg:x="25806" fg:w="7"/><text x="99.9025%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::all::check::closure$0(core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;f64&gt;,ref$&lt;f64&gt; &gt;,nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;f64&gt;,ref$ (6 samples, 0.02%)</title><rect x="99.6563%" y="245" width="0.0232%" height="15" fill="rgb(249,149,8)" fg:x="25807" fg:w="6"/><text x="99.9063%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`nalgebra::base::matrix::impl$31::eq::closure$0(nalgebra::base::matrix::impl$31::eq::closure_env$0&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, tuple$&lt;ref$&lt;f64&gt;,ref$ (6 samples, 0.02%)</title><rect x="99.6563%" y="229" width="0.0232%" height="15" fill="rgb(243,35,44)" fg:x="25807" fg:w="6"/><text x="99.9063%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$9::eq (6 samples, 0.02%)</title><rect x="99.6563%" y="213" width="0.0232%" height="15" fill="rgb(246,89,9)" fg:x="25807" fg:w="6"/><text x="99.9063%" y="223.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$35::eq (6 samples, 0.02%)</title><rect x="99.6563%" y="197" width="0.0232%" height="15" fill="rgb(233,213,13)" fg:x="25807" fg:w="6"/><text x="99.9063%" y="207.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min(core::slice::iter::Iter (34 samples, 0.13%)</title><rect x="99.6795%" y="357" width="0.1313%" height="15" fill="rgb(233,141,41)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by(core::slice::iter::Iter&lt;usize&gt;, core::cmp::Ordering (*) (34 samples, 0.13%)</title><rect x="99.6795%" y="341" width="0.1313%" height="15" fill="rgb(239,167,4)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::reduce(core::slice::iter::Iter&lt;usize&gt;, core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (34 samples, 0.13%)</title><rect x="99.6795%" y="325" width="0.1313%" height="15" fill="rgb(209,217,16)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;usize&gt;, unsigned long long*, core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (34 samples, 0.13%)</title><rect x="99.6795%" y="309" width="0.1313%" height="15" fill="rgb(219,88,35)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::min_by::fold::closure$0(core::iter::traits::iterator::Iterator::min_by::fold::closure_env$0&lt;ref$&lt;usize&gt;,core::cmp::Ordering (*)(ref$&lt;ref$&lt;usize&gt; &gt;,ref$&lt;ref$ (34 samples, 0.13%)</title><rect x="99.6795%" y="293" width="0.1313%" height="15" fill="rgb(220,193,23)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::min_by(unsigned long long*, unsigned long long*, core::cmp::Ordering (**) (34 samples, 0.13%)</title><rect x="99.6795%" y="277" width="0.1313%" height="15" fill="rgb(230,90,52)" fg:x="25813" fg:w="34"/><text x="99.9295%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::impls::impl$4::call_once(core::cmp::Ordering (**) (27 samples, 0.10%)</title><rect x="99.7065%" y="261" width="0.1043%" height="15" fill="rgb(252,106,19)" fg:x="25820" fg:w="27"/><text x="99.9565%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnMut::call_mut(core::cmp::Ordering (**) (27 samples, 0.10%)</title><rect x="99.7065%" y="245" width="0.1043%" height="15" fill="rgb(206,74,20)" fg:x="25820" fg:w="27"/><text x="99.9565%" y="255.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$11::cmp (27 samples, 0.10%)</title><rect x="99.7065%" y="229" width="0.1043%" height="15" fill="rgb(230,138,44)" fg:x="25820" fg:w="27"/><text x="99.9565%" y="239.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::cmp::impls::impl$59::cmp (10 samples, 0.04%)</title><rect x="99.7722%" y="213" width="0.0386%" height="15" fill="rgb(235,182,43)" fg:x="25837" fg:w="10"/><text x="100.0222%" y="223.50"></text></g><g><title>`0x7FFE462EFA02 (3 samples, 0.01%)</title><rect x="99.8108%" y="341" width="0.0116%" height="15" fill="rgb(242,16,51)" fg:x="25847" fg:w="3"/><text x="100.0608%" y="351.50"></text></g><g><title>`0x7FFE462CC2ED (3 samples, 0.01%)</title><rect x="99.8108%" y="325" width="0.0116%" height="15" fill="rgb(248,9,4)" fg:x="25847" fg:w="3"/><text x="100.0608%" y="335.50"></text></g><g><title>`0x7FFE4632F5FF (3 samples, 0.01%)</title><rect x="99.8108%" y="309" width="0.0116%" height="15" fill="rgb(210,31,22)" fg:x="25847" fg:w="3"/><text x="100.0608%" y="319.50"></text></g><g><title>`0x7FFE4641C384 (3 samples, 0.01%)</title><rect x="99.8108%" y="293" width="0.0116%" height="15" fill="rgb(239,54,39)" fg:x="25847" fg:w="3"/><text x="100.0608%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (7 samples, 0.03%)</title><rect x="99.8108%" y="357" width="0.0270%" height="15" fill="rgb(230,99,41)" fg:x="25847" fg:w="7"/><text x="100.0608%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (4 samples, 0.02%)</title><rect x="99.8224%" y="341" width="0.0154%" height="15" fill="rgb(253,106,12)" fg:x="25850" fg:w="4"/><text x="100.0724%" y="351.50"></text></g><g><title>`0x7FFE462EFA02 (4 samples, 0.02%)</title><rect x="99.8224%" y="325" width="0.0154%" height="15" fill="rgb(213,46,41)" fg:x="25850" fg:w="4"/><text x="100.0724%" y="335.50"></text></g><g><title>`0x7FFE462CC2ED (4 samples, 0.02%)</title><rect x="99.8224%" y="309" width="0.0154%" height="15" fill="rgb(215,133,35)" fg:x="25850" fg:w="4"/><text x="100.0724%" y="319.50"></text></g><g><title>`0x7FFE4632F5FF (4 samples, 0.02%)</title><rect x="99.8224%" y="293" width="0.0154%" height="15" fill="rgb(213,28,5)" fg:x="25850" fg:w="4"/><text x="100.0724%" y="303.50"></text></g><g><title>`0x7FFE4641C384 (4 samples, 0.02%)</title><rect x="99.8224%" y="277" width="0.0154%" height="15" fill="rgb(215,77,49)" fg:x="25850" fg:w="4"/><text x="100.0724%" y="287.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function&lt;criterion::measurement::WallTime,benchmarks::bench_mcs::closure_env$0&gt;(ref$ (25,848 samples, 99.81%)</title><rect x="0.0425%" y="693" width="99.8146%" height="15" fill="rgb(248,100,22)" fg:x="11" fg:w="25848"/><text x="0.2925%" y="703.50">benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function&lt;criterion::measurement::WallTime,benchmarks::bench_mcs::closure_..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function (25,848 samples, 99.81%)</title><rect x="0.0425%" y="677" width="99.8146%" height="15" fill="rgb(208,67,9)" fg:x="11" fg:w="25848"/><text x="0.2925%" y="687.50">benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::run_bench(criterion::benchmark_group::BenchmarkId, tuple$&lt;&gt;*, criterion::benchmark_group::impl$0::bench_function::closure_env$0 (25,848 samples, 99.81%)</title><rect x="0.0425%" y="661" width="99.8146%" height="15" fill="rgb(219,133,21)" fg:x="11" fg:w="25848"/><text x="0.2925%" y="671.50">benchmarks-86e11159e9a0f911.exe`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::run_bench(criterion::benchmark_group::BenchmarkId, tuple$..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::routine::Routine::test(criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;*, criterion::measurement::WallTime*, tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="645" width="99.8069%" height="15" fill="rgb(246,46,29)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="655.50">benchmarks-86e11159e9a0f911.exe`criterion::routine::Routine::test(criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::ben..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec (25,846 samples, 99.81%)</title><rect x="0.0502%" y="629" width="99.8069%" height="15" fill="rgb(246,185,52)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="639.50">benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::vec::Vec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (25,846 samples, 99.81%)</title><rect x="0.0502%" y="613" width="99.8069%" height="15" fill="rgb(252,136,11)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="623.50">benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (25,846 samples, 99.81%)</title><rect x="0.0502%" y="597" width="99.8069%" height="15" fill="rgb(219,138,53)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="607.50">benchmarks-86e11159e9a0f911.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f64,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt; &gt;(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="581" width="99.8069%" height="15" fill="rgb(211,51,23)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="591.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f64,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="565" width="99.8069%" height="15" fill="rgb(247,221,28)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="575.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::im..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="549" width="99.8069%" height="15" fill="rgb(251,222,45)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="559.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::it..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="533" width="99.8069%" height="15" fill="rgb(217,162,53)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="543.50">benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routin..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="517" width="99.8069%" height="15" fill="rgb(229,93,14)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="527.50">benchmarks-86e11159e9a0f911.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="501" width="99.8069%" height="15" fill="rgb(209,67,49)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="511.50">benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;u64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="485" width="99.8069%" height="15" fill="rgb(213,87,29)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="495.50">benchmarks-86e11159e9a0f911.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;u64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$&lt;&gt; &gt; &gt; &gt; &gt; &gt;*, tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="469" width="99.8069%" height="15" fill="rgb(205,151,52)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="479.50">benchmarks-86e11159e9a0f911.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u64&gt;,f64,tuple$&lt;&gt;,criterion::rou..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::routine::impl$1::bench::closure$0(criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,benchmarks::bench_mcs::closure_env$0&gt;,tuple$ (25,846 samples, 99.81%)</title><rect x="0.0502%" y="453" width="99.8069%" height="15" fill="rgb(253,215,39)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="463.50">benchmarks-86e11159e9a0f911.exe`criterion::routine::impl$1::bench::closure$0(criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterio..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::assert_iterated (25,846 samples, 99.81%)</title><rect x="0.0502%" y="437" width="99.8069%" height="15" fill="rgb(221,220,41)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="447.50">benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::assert_iterated</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,usize,usize,Rust_MCS::ExitFlagEnum&gt;,benchmarks::bench_mcs::closure$0::closure_env$0&gt; (25,846 samples, 99.81%)</title><rect x="0.0502%" y="421" width="99.8069%" height="15" fill="rgb(218,133,21)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="431.50">benchmarks-86e11159e9a0f911.exe`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$&lt;nalgebra::base::matrix::Mat..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::bench_mcs::closure$0::closure$0 (25,846 samples, 99.81%)</title><rect x="0.0502%" y="405" width="99.8069%" height="15" fill="rgb(221,193,43)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="415.50">benchmarks-86e11159e9a0f911.exe`benchmarks::bench_mcs::closure$0::closure$0</text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,usize,usize,Rust_MCS::ExitFlagEnum&gt;,alloc::string::String&gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,f64,alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;,alloc::alloc::Global&gt;,alloc::vec::Vec (25,846 samples, 99.81%)</title><rect x="0.0502%" y="389" width="99.8069%" height="15" fill="rgb(240,128,52)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="399.50">benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Co..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs&lt;1000,6&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*), nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage&lt;f64,6,1&gt; &gt;*, unsigned long long, unsigned long long, unsigned long long, double, nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::array_storage::ArrayStorage (25,846 samples, 99.81%)</title><rect x="0.0502%" y="373" width="99.8069%" height="15" fill="rgb(253,114,12)" fg:x="13" fg:w="25846"/><text x="0.3002%" y="383.50">benchmarks-86e11159e9a0f911.exe`Rust_MCS::mcs&lt;1000,6&gt;(double (*)(nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Const&lt;6&gt;,nalgebra::base::dimension::Cons..</text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;criterion::PlottingBackend&gt;::initialize&lt;criterion::PlottingBackend,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;criterion::PlottingBackend,once_cell::sync::impl$11::force::closure_env$0&lt;criterion::PlottingBackend,criterion::PlottingBackend (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;criterion::PlottingBackend,once_cell::sync::impl$11::force::closure_env$0&lt;criterion::PlottingBackend,criterion::PlottingBackend (*) (4 samples, 0.02%)</title><rect x="99.8571%" y="661" width="0.0154%" height="15" fill="rgb(215,223,47)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="671.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (4 samples, 0.02%)</title><rect x="99.8571%" y="645" width="0.0154%" height="15" fill="rgb(248,225,23)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="655.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;bool,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;bool,once_cell::sync::impl$11::force::closure_env$0&lt;bool,bool (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;bool,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;bool,once_cell::sync::impl$11::force::closure_env$0&lt;bool,bool (*)()&gt; &gt;,enum2$ (4 samples, 0.02%)</title><rect x="99.8571%" y="629" width="0.0154%" height="15" fill="rgb(250,108,0)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="639.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnOnce::call_once&lt;criterion::DEFAULT_PLOTTING_BACKEND::closure_env$0,tuple$&lt;&gt; &gt; (4 samples, 0.02%)</title><rect x="99.8571%" y="613" width="0.0154%" height="15" fill="rgb(228,208,7)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="623.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::DEFAULT_PLOTTING_BACKEND::closure$0 (4 samples, 0.02%)</title><rect x="99.8571%" y="597" width="0.0154%" height="15" fill="rgb(244,45,10)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="607.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; &gt;::initialize&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*) (4 samples, 0.02%)</title><rect x="99.8571%" y="581" width="0.0154%" height="15" fill="rgb(207,125,25)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="591.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (4 samples, 0.02%)</title><rect x="99.8571%" y="565" width="0.0154%" height="15" fill="rgb(210,195,18)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="575.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,once_cell::sync::impl$11::force::closure_env$0&lt;enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;criterion_plot::Version,enum2$&lt;criterion_plot::VersionError&gt; &gt; &gt; (*)()&gt; &gt;,enum2$ (4 samples, 0.02%)</title><rect x="99.8571%" y="549" width="0.0154%" height="15" fill="rgb(249,80,12)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="559.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion_plot::version (4 samples, 0.02%)</title><rect x="99.8571%" y="533" width="0.0154%" height="15" fill="rgb(221,65,9)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="543.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;, enum2$&lt;criterion_plot::VersionError&gt; (*) (4 samples, 0.02%)</title><rect x="99.8571%" y="517" width="0.0154%" height="15" fill="rgb(235,49,36)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="527.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::process::Command::output (4 samples, 0.02%)</title><rect x="99.8571%" y="501" width="0.0154%" height="15" fill="rgb(225,32,20)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="511.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::output (4 samples, 0.02%)</title><rect x="99.8571%" y="485" width="0.0154%" height="15" fill="rgb(215,141,46)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="495.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn (4 samples, 0.02%)</title><rect x="99.8571%" y="469" width="0.0154%" height="15" fill="rgb(250,160,47)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="479.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn_with_attributes (4 samples, 0.02%)</title><rect x="99.8571%" y="453" width="0.0154%" height="15" fill="rgb(216,222,40)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="463.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::resolve_exe (4 samples, 0.02%)</title><rect x="99.8571%" y="437" width="0.0154%" height="15" fill="rgb(234,217,39)" fg:x="25859" fg:w="4"/><text x="100.1071%" y="447.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::search_paths (3 samples, 0.01%)</title><rect x="99.8610%" y="421" width="0.0116%" height="15" fill="rgb(207,178,40)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="431.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::resolve_exe::closure$0 (3 samples, 0.01%)</title><rect x="99.8610%" y="405" width="0.0116%" height="15" fill="rgb(221,136,13)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="415.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place (3 samples, 0.01%)</title><rect x="99.8610%" y="389" width="0.0116%" height="15" fill="rgb(249,199,10)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="399.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ptr::drop_in_place (3 samples, 0.01%)</title><rect x="99.8610%" y="373" width="0.0116%" height="15" fill="rgb(249,222,13)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="383.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::program_exists (3 samples, 0.01%)</title><rect x="99.8610%" y="357" width="0.0116%" height="15" fill="rgb(244,185,38)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="367.50"></text></g><g><title>`0x7FFE43B12299 (3 samples, 0.01%)</title><rect x="99.8610%" y="341" width="0.0116%" height="15" fill="rgb(236,202,9)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="351.50"></text></g><g><title>`0x7FFE4641C764 (3 samples, 0.01%)</title><rect x="99.8610%" y="325" width="0.0116%" height="15" fill="rgb(250,229,37)" fg:x="25860" fg:w="3"/><text x="100.1110%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (3 samples, 0.01%)</title><rect x="99.8764%" y="421" width="0.0116%" height="15" fill="rgb(206,174,23)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="431.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde_json::de::from_trait&lt;serde_json::read::SliceRead,criterion::cargo_target_directory::Metadata&gt; (3 samples, 0.01%)</title><rect x="99.8764%" y="405" width="0.0116%" height="15" fill="rgb(211,33,43)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="415.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::SliceRead,criterion::cargo_target_directory::_::impl$0::deserialize::__Visitor&gt;(serde_json::de::Deserializer&lt;serde_json::read::SliceRead&gt;*, ref$&lt;str$&gt;, ref$&lt;slice2$&lt;ref$ (3 samples, 0.01%)</title><rect x="99.8764%" y="389" width="0.0116%" height="15" fill="rgb(245,58,50)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="399.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::cargo_target_directory::_::impl$0::deserialize::impl$2::visit_map(criterion::cargo_target_directory::_::impl$0::deserialize::__Visitor, serde_json::de::MapAccess (3 samples, 0.01%)</title><rect x="99.8764%" y="373" width="0.0116%" height="15" fill="rgb(244,68,36)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="383.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde::de::MapAccess::next_value(serde_json::de::MapAccess (3 samples, 0.01%)</title><rect x="99.8764%" y="357" width="0.0116%" height="15" fill="rgb(232,229,15)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde_json::de::impl$11::next_value_seed(serde_json::de::MapAccess&lt;serde_json::read::SliceRead&gt;*, core::marker::PhantomData (3 samples, 0.01%)</title><rect x="99.8764%" y="341" width="0.0116%" height="15" fill="rgb(254,30,23)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde::de::impl$5::deserialize(core::marker::PhantomData&lt;serde::de::ignored_any::IgnoredAny&gt;, serde_json::de::Deserializer (3 samples, 0.01%)</title><rect x="99.8764%" y="325" width="0.0116%" height="15" fill="rgb(235,160,14)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="335.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde::de::ignored_any::impl$1::deserialize(serde_json::de::Deserializer (3 samples, 0.01%)</title><rect x="99.8764%" y="309" width="0.0116%" height="15" fill="rgb(212,155,44)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="319.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde_json::de::impl$7::deserialize_ignored_any(serde_json::de::Deserializer (3 samples, 0.01%)</title><rect x="99.8764%" y="293" width="0.0116%" height="15" fill="rgb(226,2,50)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`serde_json::de::Deserializer&lt;serde_json::read::SliceRead&gt;::ignore_value (3 samples, 0.01%)</title><rect x="99.8764%" y="277" width="0.0116%" height="15" fill="rgb(234,177,6)" fg:x="25864" fg:w="3"/><text x="100.1264%" y="287.50"></text></g><g><title>`0x7FFE43BAC24A (3 samples, 0.01%)</title><rect x="99.8957%" y="277" width="0.0116%" height="15" fill="rgb(217,24,9)" fg:x="25869" fg:w="3"/><text x="100.1457%" y="287.50"></text></g><g><title>`0x7FFE4641D9D4 (3 samples, 0.01%)</title><rect x="99.8957%" y="261" width="0.0116%" height="15" fill="rgb(220,13,46)" fg:x="25869" fg:w="3"/><text x="100.1457%" y="271.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn (8 samples, 0.03%)</title><rect x="99.8880%" y="373" width="0.0309%" height="15" fill="rgb(239,221,27)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="383.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::spawn_with_attributes (8 samples, 0.03%)</title><rect x="99.8880%" y="357" width="0.0309%" height="15" fill="rgb(222,198,25)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="367.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::cvt (8 samples, 0.03%)</title><rect x="99.8880%" y="341" width="0.0309%" height="15" fill="rgb(211,99,13)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="351.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::impl$3::is_zero (8 samples, 0.03%)</title><rect x="99.8880%" y="325" width="0.0309%" height="15" fill="rgb(232,111,31)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="335.50"></text></g><g><title>`0x7FFE4557C6D4 (8 samples, 0.03%)</title><rect x="99.8880%" y="309" width="0.0309%" height="15" fill="rgb(245,82,37)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="319.50"></text></g><g><title>`0x7FFE43BA9986 (8 samples, 0.03%)</title><rect x="99.8880%" y="293" width="0.0309%" height="15" fill="rgb(227,149,46)" fg:x="25867" fg:w="8"/><text x="100.1380%" y="303.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::benches (25,867 samples, 99.89%)</title><rect x="0.0386%" y="709" width="99.8880%" height="15" fill="rgb(218,36,50)" fg:x="10" fg:w="25867"/><text x="0.2886%" y="719.50">benchmarks-86e11159e9a0f911.exe`benchmarks::benches</text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::sample_size(criterion::Criterion (18 samples, 0.07%)</title><rect x="99.8571%" y="693" width="0.0695%" height="15" fill="rgb(226,80,48)" fg:x="25859" fg:w="18"/><text x="100.1071%" y="703.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::impl$4::default (18 samples, 0.07%)</title><rect x="99.8571%" y="677" width="0.0695%" height="15" fill="rgb(238,224,15)" fg:x="25859" fg:w="18"/><text x="100.1071%" y="687.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::sync::impl$12::deref(once_cell::sync::Lazy&lt;std::path::PathBuf,std::path::PathBuf (*) (13 samples, 0.05%)</title><rect x="99.8764%" y="661" width="0.0502%" height="15" fill="rgb(241,136,10)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="671.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::ffi::os_str::impl$10::clone (13 samples, 0.05%)</title><rect x="99.8764%" y="645" width="0.0502%" height="15" fill="rgb(208,32,45)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="655.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::os_str::wtf8::impl$10::clone (13 samples, 0.05%)</title><rect x="99.8764%" y="629" width="0.0502%" height="15" fill="rgb(207,135,9)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="639.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys_common::wtf8::impl$35::clone (13 samples, 0.05%)</title><rect x="99.8764%" y="613" width="0.0502%" height="15" fill="rgb(206,86,44)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="623.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (13 samples, 0.05%)</title><rect x="99.8764%" y="597" width="0.0502%" height="15" fill="rgb(245,177,15)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="607.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (13 samples, 0.05%)</title><rect x="99.8764%" y="581" width="0.0502%" height="15" fill="rgb(206,64,50)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="591.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_slice (13 samples, 0.05%)</title><rect x="99.8764%" y="565" width="0.0502%" height="15" fill="rgb(234,36,40)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="575.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::OnceCell&lt;std::path::PathBuf&gt;::initialize&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*) (13 samples, 0.05%)</title><rect x="99.8764%" y="549" width="0.0502%" height="15" fill="rgb(213,64,8)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="559.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (13 samples, 0.05%)</title><rect x="99.8764%" y="533" width="0.0502%" height="15" fill="rgb(210,75,36)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="543.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`once_cell::imp::impl$4::initialize::closure$0&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;std::path::PathBuf,once_cell::sync::impl$11::force::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*)()&gt; &gt;,enum2$ (13 samples, 0.05%)</title><rect x="99.8764%" y="517" width="0.0502%" height="15" fill="rgb(229,88,21)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="527.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`core::ops::function::FnOnce::call_once&lt;criterion::DEFAULT_OUTPUT_DIRECTORY::closure_env$0,tuple$&lt;&gt; &gt; (13 samples, 0.05%)</title><rect x="99.8764%" y="501" width="0.0502%" height="15" fill="rgb(252,204,47)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="511.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::DEFAULT_OUTPUT_DIRECTORY::closure$0 (13 samples, 0.05%)</title><rect x="99.8764%" y="485" width="0.0502%" height="15" fill="rgb(208,77,27)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="495.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::cargo_target_directory (13 samples, 0.05%)</title><rect x="99.8764%" y="469" width="0.0502%" height="15" fill="rgb(221,76,26)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="479.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::option::Option&lt;std::path::PathBuf&gt; &gt;::or_else(enum2$&lt;core::option::Option (13 samples, 0.05%)</title><rect x="99.8764%" y="453" width="0.0502%" height="15" fill="rgb(225,139,18)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="463.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`criterion::cargo_target_directory::closure$0 (13 samples, 0.05%)</title><rect x="99.8764%" y="437" width="0.0502%" height="15" fill="rgb(230,137,11)" fg:x="25864" fg:w="13"/><text x="100.1264%" y="447.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`enum2$&lt;core::result::Result&lt;std::process::Output,std::io::error::Error&gt; &gt;::ok(enum2$&lt;core::result::Result (10 samples, 0.04%)</title><rect x="99.8880%" y="421" width="0.0386%" height="15" fill="rgb(212,28,1)" fg:x="25867" fg:w="10"/><text x="100.1380%" y="431.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::process::Command::output (10 samples, 0.04%)</title><rect x="99.8880%" y="405" width="0.0386%" height="15" fill="rgb(248,164,17)" fg:x="25867" fg:w="10"/><text x="100.1380%" y="415.50"></text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::pal::windows::process::Command::output (10 samples, 0.04%)</title><rect x="99.8880%" y="389" width="0.0386%" height="15" fill="rgb(222,171,42)" fg:x="25867" fg:w="10"/><text x="100.1380%" y="399.50"></text></g><g><title>`0x7FFE463714FC (25,878 samples, 99.93%)</title><rect x="0.0039%" y="917" width="99.9305%" height="15" fill="rgb(243,84,45)" fg:x="1" fg:w="25878"/><text x="0.2539%" y="927.50">`0x7FFE463714FC</text></g><g><title>`0x7FFE4556E8D7 (25,878 samples, 99.93%)</title><rect x="0.0039%" y="901" width="99.9305%" height="15" fill="rgb(252,49,23)" fg:x="1" fg:w="25878"/><text x="0.2539%" y="911.50">`0x7FFE4556E8D7</text></g><g><title>benchmarks-86e11159e9a0f911.exe`__scrt_common_main_seh() (25,874 samples, 99.92%)</title><rect x="0.0193%" y="885" width="99.9150%" height="15" fill="rgb(215,19,7)" fg:x="5" fg:w="25874"/><text x="0.2693%" y="895.50">benchmarks-86e11159e9a0f911.exe`__scrt_common_main_seh()</text></g><g><title>benchmarks-86e11159e9a0f911.exe`invoke_main() (25,869 samples, 99.90%)</title><rect x="0.0386%" y="869" width="99.8957%" height="15" fill="rgb(238,81,41)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="879.50">benchmarks-86e11159e9a0f911.exe`invoke_main()</text></g><g><title>benchmarks-86e11159e9a0f911.exe`main (25,869 samples, 99.90%)</title><rect x="0.0386%" y="853" width="99.8957%" height="15" fill="rgb(210,199,37)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="863.50">benchmarks-86e11159e9a0f911.exe`main</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal (25,869 samples, 99.90%)</title><rect x="0.0386%" y="837" width="99.8957%" height="15" fill="rgb(244,192,49)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="847.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panic::catch_unwind (25,869 samples, 99.90%)</title><rect x="0.0386%" y="821" width="99.8957%" height="15" fill="rgb(226,211,11)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="831.50">benchmarks-86e11159e9a0f911.exe`std::panic::catch_unwind</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panicking::try (25,869 samples, 99.90%)</title><rect x="0.0386%" y="805" width="99.8957%" height="15" fill="rgb(236,162,54)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="815.50">benchmarks-86e11159e9a0f911.exe`std::panicking::try</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::panicking::try::do_call (25,869 samples, 99.90%)</title><rect x="0.0386%" y="789" width="99.8957%" height="15" fill="rgb(220,229,9)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="799.50">benchmarks-86e11159e9a0f911.exe`std::panicking::try::do_call</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal::closure$0 (25,869 samples, 99.90%)</title><rect x="0.0386%" y="773" width="99.8957%" height="15" fill="rgb(250,87,22)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="783.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (25,869 samples, 99.90%)</title><rect x="0.0386%" y="757" width="99.8957%" height="15" fill="rgb(239,43,17)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="767.50">benchmarks-86e11159e9a0f911.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>benchmarks-86e11159e9a0f911.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (25,869 samples, 99.90%)</title><rect x="0.0386%" y="741" width="99.8957%" height="15" fill="rgb(231,177,25)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="751.50">benchmarks-86e11159e9a0f911.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>benchmarks-86e11159e9a0f911.exe`benchmarks::main (25,869 samples, 99.90%)</title><rect x="0.0386%" y="725" width="99.8957%" height="15" fill="rgb(219,179,1)" fg:x="10" fg:w="25869"/><text x="0.2886%" y="735.50">benchmarks-86e11159e9a0f911.exe`benchmarks::main</text></g><g><title>`0x7FFE4633F33C (6 samples, 0.02%)</title><rect x="99.9498%" y="853" width="0.0232%" height="15" fill="rgb(238,219,53)" fg:x="25883" fg:w="6"/><text x="100.1998%" y="863.50"></text></g><g><title>`0x7FFE462D9B30 (6 samples, 0.02%)</title><rect x="99.9498%" y="837" width="0.0232%" height="15" fill="rgb(232,167,36)" fg:x="25883" fg:w="6"/><text x="100.1998%" y="847.50"></text></g><g><title>`0x7FFE46315CA0 (5 samples, 0.02%)</title><rect x="99.9537%" y="821" width="0.0193%" height="15" fill="rgb(244,19,51)" fg:x="25884" fg:w="5"/><text x="100.2037%" y="831.50"></text></g><g><title>`0x7FFE46316094 (3 samples, 0.01%)</title><rect x="99.9614%" y="805" width="0.0116%" height="15" fill="rgb(224,6,22)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="815.50"></text></g><g><title>`0x7FFE462F6E7B (3 samples, 0.01%)</title><rect x="99.9614%" y="789" width="0.0116%" height="15" fill="rgb(224,145,5)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="799.50"></text></g><g><title>`0x7FFE462F6D46 (3 samples, 0.01%)</title><rect x="99.9614%" y="773" width="0.0116%" height="15" fill="rgb(234,130,49)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="783.50"></text></g><g><title>`0x7FFE462F6D1A (3 samples, 0.01%)</title><rect x="99.9614%" y="757" width="0.0116%" height="15" fill="rgb(254,6,2)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="767.50"></text></g><g><title>`0x7FFE462F7BDC (3 samples, 0.01%)</title><rect x="99.9614%" y="741" width="0.0116%" height="15" fill="rgb(208,96,46)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="751.50"></text></g><g><title>`0x7FFE462F8830 (3 samples, 0.01%)</title><rect x="99.9614%" y="725" width="0.0116%" height="15" fill="rgb(239,3,39)" fg:x="25886" fg:w="3"/><text x="100.2114%" y="735.50"></text></g><g><title>`0x7FFE4636A145 (8 samples, 0.03%)</title><rect x="99.9498%" y="869" width="0.0309%" height="15" fill="rgb(233,210,1)" fg:x="25883" fg:w="8"/><text x="100.1998%" y="879.50"></text></g><g><title>all (25,896 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="25896"/><text x="0.2500%" y="943.50"></text></g><g><title>`0x7FFE463AB1EE (17 samples, 0.07%)</title><rect x="99.9344%" y="917" width="0.0656%" height="15" fill="rgb(240,136,2)" fg:x="25879" fg:w="17"/><text x="100.1844%" y="927.50"></text></g><g><title>`0x7FFE463D98FB (16 samples, 0.06%)</title><rect x="99.9382%" y="901" width="0.0618%" height="15" fill="rgb(239,18,37)" fg:x="25880" fg:w="16"/><text x="100.1882%" y="911.50"></text></g><g><title>`0x7FFE46368540 (16 samples, 0.06%)</title><rect x="99.9382%" y="885" width="0.0618%" height="15" fill="rgb(218,185,22)" fg:x="25880" fg:w="16"/><text x="100.1882%" y="895.50"></text></g></svg></svg>